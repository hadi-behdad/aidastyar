نکات خیلی خیلی مهم: موارد زیر رو تو جوابت در نظر بگیر
هیچ کامنتی تو این پروژه نزار
خط اول هر فایل، باید آدرس و نام فایل رو داشته باشه
فایل ها رو تو قالب تیکه های کد که امکان کپی و دانلود داره برام بفرست که راحت بتونم کپی کنم
-----------------------------------------------------------------------------------------------------
<!--/home/aidastya/public_html/wp-content/themes/woodmart-child/form.html-->
<!DOCTYPE html>
<html lang="fa">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>فرم چند مرحله‌ای</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/fonts/vazir-font.css">
</head>
<body>
    <form id="multi-step-form">
        <div id="header-container">
            <div id="step-counter"><span id="current-step">1</span>/<span id="total-steps">7</span></div>
            <button type="button" id="back-button">›</button>
        </div>
        <div id="progress-bar-container">
            <div id="progress-bar"></div>
        </div>

        <div id="gender-selection-step" class="step active">
            <h1 id="form-title">سیستم هوشمند رژیم غذایی هوش مصنوعی</h1>
            <h2>جنسیت خود را انتخاب کنید</h2>
            <div id="gender-selection">
                <div class="gender-option" data-gender="male"><img src="assets/images/webp/male.webp" alt="مرد"></div>
                <div class="gender-option" data-gender="female"><img src="assets/images/webp/female.webp" alt="زن"></div>
            </div>
        
            <div id="terms-checkbox" class="checkbox-container terms-combined">
                <input type="checkbox" id="confirm-terms" class="real-checkbox">
                <label for="confirm-terms" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">شرایط و قوانین را می‌پذیرم</span>
                </label>
                <div class="terms-box">
                    <ul class="terms-list">
                        <li>اطلاعات سلامت و شخصی من، با حداکثر امنیت و مطابق قوانین محرمانگی، نزد این سامانه محفوظ خواهد ماند.</li>
                        <li>توصیه‌های این سیستم توسط پیشرفته‌ترین الگوریتم‌های هوش مصنوعی ارائه می‌شود، اما جایگزین تشخیص پزشک نیست.</li>
                        <li>مسئولیت نهایی تصمیمات سلامت و استفاده از این توصیه‌ها بر عهده خودم است.</li>
                        <li>متعهد می‌شوم برای مسائل پزشکی مهم، حتماً با پزشک معتمدم مشورت کنم.</li>
                    </ul>
                </div>
            </div>
        </div>

        <div id="goal-selection-step" class="step">
            <h2>هدفت از رژیم غذایی چیه؟</h2>
            <div id="goal-selection">
                <div class="goal-option" data-goal="weight-loss">
                    <img src="assets/images/png/lose-weight-min.png" alt="کاهش وزن" width="60" height="30">
                    <span>کاهش وزن (به وزن ایده‌آل برسم)</span>
                </div>
                <div class="goal-option" data-goal="weight-gain">
                    <img src="assets/images/png/gain-weight-min.png" alt="افزایش وزن" width="60" height="30">
                    <span>افزایش وزن (قدرت و انرژی را تجربه کنم)</span>
                </div>
                <div class="goal-option" data-goal="fitness">
                    <img src="assets/images/png/stay-fit-min.png" alt="تناسب اندام" width="60" height="30">
                    <span>تناسب اندام (به اندام دلخواهم برسم)</span>
                </div>
            </div>
        </div>

        <div id="age-input-step" class="step">
            <h2>سن شما چند سال است؟</h2>
            <div class="input-container">
                <input type="text" inputmode="numeric" id="age-input">
                <span id="age-display">0 سال</span>
            </div>
            <div id="age-validation-container">
                <p id="age-error" class="error-message"></p>
                <div class="separator-dotted"></div>
                <div class="info-box">
                    <div class="info-content">
                        <img src="assets/images/png/age-min.png" width="30" height="30" alt="سن">
                        <div class="info-text">
                            <span class="first-line">سن شما را می‌پرسیم تا برنامه شخصی شما را ایجاد کنیم.</span>
                            <span class="second-line">افراد مسن‌تر نسبت به افراد جوان‌تر با همان شاخص توده بدنی (BMI)، معمولاً چربی بدن بیشتری دارند</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="height-input-step" class="step">
            <h2>قد شما چقدر است؟</h2>
            <div class="input-container">
                <input type="text" inputmode="numeric" id="height-input">
                <span id="height-display">0 سانتی‌متر</span>
            </div>
            <div id="height-validation-container">
                <p id="height-error" class="error-message"></p>
                <div class="separator-dotted"></div>
                <div class="info-box">
                    <div class="info-content">
                        <img src="assets/images/png/height-min.png" width="30" height="30" alt="قد">
                        <div class="info-text">
                            <span class="first-line">محاسبه شاخص توده بدنی شما</span>
                            <span class="second-line">شاخص توده بدنی (BMI) به طور گسترده به عنوان یک معیار برای سنجش خطر ابتلا یا شیوع برخی مشکلات سلامتی مورد استفاده قرار می‌گیرد</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="weight-input-step" class="step">
            <h2>وزن شما چقدر است؟</h2>
            <div class="input-container">
                <input type="text" inputmode="numeric" id="weight-input">
                <span id="weight-display">0 کیلوگرم</span>
            </div>
            <div id="weight-validation-container">
                <p id="weight-error" class="error-message"></p>
                <div class="separator-dotted"></div>
                <div id="bmi-result-container">
                    <div class="bmi-info">
                        <h3>شاخص توده بدنی (BMI) شما: <span id="bmi-value">0</span></h3>
                        <p id="bmi-category" class="bmi-category"></p>
                    </div>
                    <div class="bmi-scale-container">
                        <div class="bmi-scale-labels">
                            <span>کمبود وزن</span>
                            <span>نرمال</span>
                            <span>اضافه وزن</span>
                            <span>چاق</span>
                            <span>چاقی شدید</span>
                        </div>
                        <div class="bmi-scale">
                            <div class="underweight"></div>
                            <div class="normal"></div>
                            <div class="overweight"></div>
                            <div class="obese"></div>
                            <div class="extremely-obese"></div>
                            <div id="bmi-indicator" class="bmi-indicator"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="target-weight-step" class="step">
            <h2>وزن هدف شما چقدر است؟</h2>
            <div class="input-container">
                <input type="text" inputmode="numeric" id="target-weight-input">
                <span id="target-weight-display">0 کیلوگرم</span>
            </div>
            <div id="target-weight-validation-container">
                <p id="targetWeight-error" class="error-message"></p>
                <div class="separator-dotted"></div>
                <div class="info-box">
                    <div class="info-content">
                        <img src="assets/images/png/weight-min.png" width="30" height="30" alt="وزن هدف">
                        <div class="info-text">
                            <span class="first-line">وزن هدف شما را می‌پرسیم تا برنامه مناسب برای رسیدن به آن را طراحی کنیم.</span>
                            <span class="second-line">لطفاً وزن واقع‌بینانه‌ای را وارد کنید که با قد و ساختار بدنی شما تناسب داشته باشد</span>
                        </div>
                    </div>
                </div>
            </div>
        </div> 
        <div id="empty-step-after-6" class="step">
            <div id="goal-result">
                <div class="chart-container">
                    <canvas id="goal-chart"></canvas>
                </div>
                <div class="chart-message"></div>
            </div>
        </div>
        <div id="activity-selection-step" class="step">
            <h2>میزان فعالیت روزانه شما چقدر است؟</h2>
            <div id="activity-selection">
                <div class="activity-option" data-activity="very-low">
                    <img src="assets/images/png/without-activity-min.png" alt="فعالیت خیلی کم" width="60" height="30">
                    <span>خیلی کم (کمتر از 1 ساعت)</span>
                </div>
                <div class="activity-option" data-activity="low">
                    <img src="assets/images/png/alittle-activity-min.png" alt="فعالیت کم" width="60" height="30">
                    <span>کم (1 تا 2 ساعت)</span>
                </div>
                <div class="activity-option" data-activity="medium">
                    <img src="assets/images/png/middle-activity-min.png" alt="فعالیت متوسط" width="60" height="30">
                    <span>متوسط (2 تا 4 ساعت)</span>
                </div>
                <div class="activity-option" data-activity="high">
                    <img src="assets/images/png/alot-activity-min.png" alt="فعالیت زیاد" width="60" height="30">
                    <span>زیاد (بیشتر از 4 ساعت)</span>
                </div>
            </div>
        </div>
        <div id="meal-selection-step" class="step">
            <h2>چند وعده غذایی در روز مصرف می‌کنید؟</h2>
            <div id="meal-selection">
                <div class="meal-option" data-meals="2">
                    <img src="assets/images/png/gain-weight-min.png" alt="2 وعده" width="60" height="30">
                    <span>۲ وعده</span>
                </div>
                <div class="meal-option" data-meals="3">
                    <img src="assets/images/png/gain-weight-min.png" alt="3 وعده" width="60" height="30">
                    <span>۳ وعده</span>
                </div>
                <div class="meal-option" data-meals="4">
                    <img src="assets/images/png/gain-weight-min.png" alt="4 وعده" width="60" height="30">
                    <span>۴ وعده</span>
                </div>
                <div class="meal-option" data-meals="more">
                    <img src="assets/images/png/gain-weight-min.png" alt="بیشتر" width="60" height="30">
                    <span>بیشتر</span>
                </div>
            </div>
        </div>
        <div id="additional-info-step" class="step">
            <h2>اطلاعات تکمیلی</h2>
            <div id="additional-info-selection">
                <div class="checkbox-container first-option">
                    <input type="checkbox" id="info-none" class="real-checkbox">
                    <label for="info-none" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">هیچکدام از موارد زیر را ندارم</span>
                    </label>
                </div>
                
                <div class="separator"></div>
                
                <div class="checkbox-container">
                    <input type="checkbox" id="info-diabetes" class="real-checkbox">
                    <label for="info-diabetes" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">دیابت</span>
                    </label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="info-pressure" class="real-checkbox">
                    <label for="info-pressure" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">فشار خون</span>
                    </label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="info-thyroid" class="real-checkbox">
                    <label for="info-thyroid" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">مشکلات تیروئید</span>
                    </label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="info-allergy" class="real-checkbox">
                    <label for="info-allergy" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">حساسیت غذایی</span>
                    </label>
                </div>
            </div>
        </div>        
        <div id="food-restriction-step" class="step">
            <h2>آیا محدودیت غذایی خاصی دارید؟</h2>
            <div id="food-restriction-selection" class="checkbox-selection-container">
                <div class="checkbox-container first-option">
                    <input type="checkbox" id="restriction-none" class="real-checkbox">
                    <label for="restriction-none" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">نه، محدودیت ندارم</span>
                    </label>
                </div>
                
                <div class="separator"></div>
                
                <div class="checkbox-container">
                    <input type="checkbox" id="restriction-vegetarian" class="real-checkbox">
                    <label for="restriction-vegetarian" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">گیاهخوار هستم</span>
                    </label>
                </div>
                <div class="checkbox-container">
                    <input type="checkbox" id="restriction-no-seafood" class="real-checkbox">
                    <label for="restriction-no-seafood" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">غذای دریایی نمی‌خورم</span>
                    </label>
                </div>
            </div>
        </div>
        <div id="new-step-before-final" class="step">
            <h2>خلاصه اطلاعات شما</h2>
            <div id="summary-container"></div>
            <div id="confirmation-checkbox" class="checkbox-container">
                <input type="checkbox" id="confirm-info" class="real-checkbox">
                <label for="confirm-info" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">اطلاعات وارد شده را تأیید می‌کنم</span>
                </label>
            </div>
        </div>   
        <div id="final-step" class="step">
            <h2>مرحله نهایی</h2>
            <p>اطلاعات نهایی را بررسی کنید.</p>
        </div>
        <div id="next-button-container">
            <button type="button" class="next-step">گام بعد</button>
        </div>
    </form>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="assets/js/script.js"></script>
</body>
</html>
-----------------------------------------------------------------------------------------------------
// /home/aidastya/public_html/wp-content/themes/woodmart-child/assets/js/script.js
const setupAdditionalInfoSelection = (currentStep) => {
    const checkboxes = document.querySelectorAll('#additional-info-selection .real-checkbox');
    const nextButton = document.querySelector('.next-step');
    const noneCheckbox = document.getElementById('info-none');
    
    if (currentStep !== 10) return;

    nextButton.disabled = true;

    const validateForm = () => {
        const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
        nextButton.disabled = !anyChecked;
    };

    checkboxes.forEach(checkbox => {
        const handleCheckboxChange = function() {
            if (this === noneCheckbox && this.checked) {
                checkboxes.forEach(cb => {
                    if (cb !== noneCheckbox) {
                        cb.checked = false;
                        cb.nextElementSibling.classList.remove('checked');
                    }
                });
            } else if (this.checked) {
                noneCheckbox.checked = false;
                noneCheckbox.nextElementSibling.classList.remove('checked');
            }
            
            const label = this.nextElementSibling;
            label.classList.add('checked-animation');
            
            setTimeout(() => {
                label.classList.remove('checked-animation');
                if (this.checked) {
                    label.classList.add('checked');
                } else {
                    label.classList.remove('checked');
                }
            }, 800);
            
            validateForm();
        };
        
        checkbox.removeEventListener('change', handleCheckboxChange);
        checkbox.addEventListener('change', handleCheckboxChange);
    });

    validateForm();
};

const setupFoodRestrictionSelection = (currentStep) => {
    const checkboxes = document.querySelectorAll('#food-restriction-selection .real-checkbox');
    const nextButton = document.querySelector('.next-step');
    const noneCheckbox = document.getElementById('restriction-none');
    
    if (currentStep !== 11) return;

    nextButton.disabled = true;

    const validateForm = () => {
        const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
        nextButton.disabled = !anyChecked;
    };

    checkboxes.forEach(checkbox => {
        const handleCheckboxChange = function() {
            if (this === noneCheckbox && this.checked) {
                checkboxes.forEach(cb => {
                    if (cb !== noneCheckbox) {
                        cb.checked = false;
                        cb.nextElementSibling.classList.remove('checked');
                    }
                });
            } else if (this.checked) {
                noneCheckbox.checked = false;
                noneCheckbox.nextElementSibling.classList.remove('checked');
            }
            
            const label = this.nextElementSibling;
            label.classList.add('checked-animation');
            
            setTimeout(() => {
                label.classList.remove('checked-animation');
                if (this.checked) {
                    label.classList.add('checked');
                } else {
                    label.classList.remove('checked');
                }
            }, 800);
            
            validateForm();
        };
        
        checkbox.removeEventListener('change', handleCheckboxChange);
        checkbox.addEventListener('change', handleCheckboxChange);
    });

    validateForm();
};

const setupConfirmationCheckbox = (currentStep) => {
    const nextButton = document.querySelector('.next-step');
    const confirmCheckbox = document.getElementById('confirm-info');
    
    if (currentStep !== 12) return;

    // Check if checkbox is already checked when entering the step
    nextButton.disabled = !confirmCheckbox.checked;

    const validateForm = () => {
        nextButton.disabled = !confirmCheckbox.checked;
    };

    confirmCheckbox.addEventListener('change', function() {
        const label = this.nextElementSibling;
        label.classList.add('checked-animation');
        
        setTimeout(() => {
            label.classList.remove('checked-animation');
            if (this.checked) {
                label.classList.add('checked');
            } else {
                label.classList.remove('checked');
            }
        }, 800);
        
        validateForm();
    });

    validateForm();
};

document.addEventListener("DOMContentLoaded", () => {
    const confirmCheckbox = document.getElementById("confirm-terms");
    const genderOptions = document.querySelectorAll(".gender-option");
    
    const updateGenderOptionsState = () => {
        genderOptions.forEach(option => {
            if (confirmCheckbox.checked) {
                option.style.opacity = "1";
                option.style.pointerEvents = "auto";
                option.style.filter = "none";
            } else {
                option.style.opacity = "0.5";
                option.style.pointerEvents = "none";
                option.style.filter = "grayscale(80%)";
            }
        });
    };
    
    confirmCheckbox.addEventListener("change", updateGenderOptionsState);
    updateGenderOptionsState();
    
    const totalSteps = document.querySelectorAll(".step").length;
    const state = {
        currentStep: 1,
        formData: {},
        updateStep(step) {
            this.currentStep = step;
            showStep(step);
            updateStepCounter(step);
            updateProgressBar(step);
        },
        updateFormData(key, value) {
            this.formData[key] = value;
            validateStep(this.currentStep);
        }
    };
    
    const showStep = (step) => {
        const stepElements = [
            "gender-selection-step",
            "goal-selection-step",
            "age-input-step", 
            "height-input-step",
            "weight-input-step",
            "target-weight-step",
            "empty-step-after-6",
            "activity-selection-step",
            "meal-selection-step",
            "additional-info-step",
            "food-restriction-step",
            "new-step-before-final",
            "final-step"
        ];
        
        document.querySelectorAll(".step").forEach(el => el.classList.remove("active"));
        const currentStepElement = document.getElementById(stepElements[step - 1]);
        if (currentStepElement) currentStepElement.classList.add("active");

if (step === 7) {
    const goal = state.formData.goal;
    const ctx = document.getElementById('goal-chart').getContext('2d');
    const messageEl = document.querySelector('.chart-message');
    const currentWeight = state.formData.weight;
    const targetWeight = state.formData.targetWeight;
    
    if (window.goalChart) {
        window.goalChart.destroy();
    }

    // Create 5 intermediate points for smoother curve
    const pointsCount = 7; // Start + 5 intermediate + End
    const dataPoints = [];
    const labels = Array(pointsCount).fill('');

    if (goal === 'weight-loss') {
        const totalLoss = currentWeight - targetWeight;
        for (let i = 0; i < pointsCount; i++) {
            const progress = i / (pointsCount - 1);
            const easedProgress = 1 - Math.pow(1 - progress, 1.5);
            dataPoints.push(currentWeight - (totalLoss * easedProgress));
        }
    } else if (goal === 'weight-gain') {
        const totalGain = targetWeight - currentWeight;
        for (let i = 0; i < pointsCount; i++) {
            const progress = i / (pointsCount - 1);
            const easedProgress = Math.pow(progress, 1.5);
            dataPoints.push(currentWeight + (totalGain * easedProgress));
        }
    } else { // fitness
        const totalChange = Math.abs(targetWeight - currentWeight);
        for (let i = 0; i < pointsCount; i++) {
            const progress = i / (pointsCount - 1);
            const easedProgress = progress < 0.5 
                ? 2 * Math.pow(progress, 1.5)
                : 1 - Math.pow(-2 * progress + 2, 1.5) / 2;
            dataPoints.push(
                currentWeight > targetWeight 
                    ? currentWeight - (totalChange * easedProgress)
                    : currentWeight + (totalChange * easedProgress)
            );
        }
    }

    // Calculate dynamic height based on viewport
    const isMobile = window.innerWidth <= 768;
    const chartHeight = isMobile ? Math.min(window.innerHeight * 0.5, 400) : 400;

    const chartConfigs = {
        'weight-loss': {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'روند تغییر وزن',
                    data: dataPoints,
                    borderColor: '#ff6b6b',
                    backgroundColor: 'rgba(255, 107, 107, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: ['#ff6b6b', ...Array(pointsCount-2).fill('#ff6b6b55'), '#ff6b6b'],
                    pointBorderColor: ['#ff6b6b', ...Array(pointsCount-2).fill('#ff6b6b55'), '#ff6b6b'],
                    pointRadius: [5, ...Array(pointsCount-2).fill(3), 5],
                    pointHoverRadius: [7, ...Array(pointsCount-2).fill(5), 7],
                    pointHoverBorderWidth: [2, ...Array(pointsCount-2).fill(1), 2]
                }]
            },
            options: getChartOptions('روند کاهش وزن شما', chartHeight),
            message: `وزن فعلی: ${currentWeight} کیلوگرم | وزن هدف: ${targetWeight} کیلوگرم`
        },
        'weight-gain': {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'روند تغییر وزن',
                    data: dataPoints,
                    borderColor: '#66bb6a',
                    backgroundColor: 'rgba(102, 187, 106, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: ['#66bb6a', ...Array(pointsCount-2).fill('#66bb6a55'), '#66bb6a'],
                    pointBorderColor: ['#66bb6a', ...Array(pointsCount-2).fill('#66bb6a55'), '#66bb6a'],
                    pointRadius: [5, ...Array(pointsCount-2).fill(3), 5],
                    pointHoverRadius: [7, ...Array(pointsCount-2).fill(5), 7],
                    pointHoverBorderWidth: [2, ...Array(pointsCount-2).fill(1), 2]
                }]
            },
            options: getChartOptions('روند افزایش وزن شما', chartHeight),
            message: `وزن فعلی: ${currentWeight} کیلوگرم | وزن هدف: ${targetWeight} کیلوگرم`
        },
        'fitness': {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'روند تغییر وزن',
                    data: dataPoints,
                    borderColor: '#ffee58',
                    backgroundColor: 'rgba(255, 238, 88, 0.1)',
                    borderWidth: 3,
                    tension: 0.4,
                    fill: true,
                    pointBackgroundColor: ['#ffee58', ...Array(pointsCount-2).fill('#ffee5855'), '#ffee58'],
                    pointBorderColor: ['#ffee58', ...Array(pointsCount-2).fill('#ffee5855'), '#ffee58'],
                    pointRadius: [5, ...Array(pointsCount-2).fill(3), 5],
                    pointHoverRadius: [7, ...Array(pointsCount-2).fill(5), 7],
                    pointHoverBorderWidth: [2, ...Array(pointsCount-2).fill(1), 2]
                }]
            },
            options: getChartOptions('روند تناسب اندام شما', chartHeight),
            message: `وزن فعلی: ${currentWeight} کیلوگرم | وزن هدف: ${targetWeight} کیلوگرم`
        }
    };

    function getChartOptions(title, height) {
        return {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                title: {
                    display: true,
                    text: title,
                    font: {
                        family: 'Vazir',
                        size: isMobile ? 16 : 18
                    },
                    padding: {
                        top: 10,
                        bottom: 20
                    }
                },
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            if (context.dataIndex === 0) {
                                return `وزن فعلی: ${context.raw.toFixed(1)} کیلوگرم`;
                            } else if (context.dataIndex === context.dataset.data.length - 1) {
                                return `وزن هدف: ${context.raw.toFixed(1)} کیلوگرم`;
                            }
                            return '';
                        }
                    },
                    titleFont: {
                        family: 'Vazir',
                        size: isMobile ? 12 : 14
                    },
                    bodyFont: {
                        family: 'Vazir',
                        size: isMobile ? 12 : 14
                    },
                    footerFont: {
                        family: 'Vazir'
                    },
                    displayColors: false,
                    padding: isMobile ? 8 : 12
                },
                animation: {
                    duration: 1500,
                    easing: 'easeOutQuart'
                }
            },
            scales: {
                y: {
                    beginAtZero: false,
                    min: Math.min(currentWeight, targetWeight) - 5,
                    max: Math.max(currentWeight, targetWeight) + 5,
                    ticks: {
                        callback: function(value) {
                            return value + ' کیلوگرم';
                        },
                        font: {
                            size: isMobile ? 12 : 14
                        },
                        padding: isMobile ? 5 : 10
                    },
                    grid: {
                        drawBorder: false
                    }
                },
                x: {
                    grid: {
                        display: false
                    },
                    ticks: {
                        font: {
                            size: isMobile ? 12 : 14
                        }
                    }
                }
            },
            elements: {
                line: {
                    cubicInterpolationMode: 'monotone'
                },
                point: {
                    hitRadius: 10
                }
            },
            layout: {
                padding: {
                    left: isMobile ? 5 : 10,
                    right: isMobile ? 5 : 10,
                    top: isMobile ? 5 : 10,
                    bottom: isMobile ? 5 : 10
                }
            }
        };
    }
    
    // Set dynamic height for chart container
    const chartContainer = document.querySelector('.chart-container');
    chartContainer.style.height = `${chartHeight}px`;
    chartContainer.style.minHeight = '300px'; // Minimum height for very small screens
    
    window.goalChart = new Chart(ctx, chartConfigs[goal]);
    messageEl.textContent = chartConfigs[goal].message;
    
    chartContainer.classList.add('animate-chart');
}
        
        const nextButtonContainer = document.getElementById("next-button-container");
        if (nextButtonContainer) nextButtonContainer.style.display = [1, 2, 8, 9].includes(step) ? "none" : "block";
    
        if ([3, 4, 5, 6, 7].includes(step)) {
            const inputId = `${["age", "height", "weight", "target-weight"][step - 3]}-input`;
            const inputElement = document.getElementById(inputId);
            if (inputElement) inputElement.focus();
            validateStep(step);
        }
        
        if (step === 10) {
            setupAdditionalInfoSelection(step);
        } else if (step === 11) {
            setupFoodRestrictionSelection(step);
        } else if (step === 12) {
            showSummary();
            setupConfirmationCheckbox(step);
        }
    };
    
    const validateStep = (step) => {
        const nextButton = document.querySelector(".next-step");
        const errorMessages = {
            3: { field: "age", min: 5, max: 100, unit: "سال", label: "سن", errorId: "age-error" },
            4: { field: "height", min: 100, max: 250, unit: "سانتی‌متر", label: "قد", errorId: "height-error" },
            5: { field: "weight", min: 30, max: 300, unit: "کیلوگرم", label: "وزن", errorId: "weight-error" },
            6: { field: "targetWeight", min: 30, max: 300, unit: "کیلوگرم", label: "وزن هدف", errorId: "targetWeight-error" }
        };
    
        if (errorMessages[step]) {
            const { field, min, max, unit, label, errorId } = errorMessages[step];
            const value = state.formData[field];
            const errorElement = document.getElementById(errorId);
            
            if (!errorElement) {
                console.error(`Element with id ${errorId} not found`);
                return;
            }
    
            if (value >= min && value <= max) {
                errorElement.innerHTML = `<span class="tick-icon"></span> مقدار وارد شده معتبر است.`;
                errorElement.classList.add("valid");
                nextButton.disabled = false;
            } else {
                errorElement.textContent = `${label} باید بین ${min} تا ${max} ${unit} وارد شود`;
                errorElement.classList.remove("valid");
                nextButton.disabled = true;
            }
        }
    };

    const updateStepCounter = (step) => {
        document.getElementById("current-step").textContent = step;
        document.getElementById("total-steps").textContent = totalSteps;
    };

    const updateProgressBar = (step) => {
        const progress = ((step - 1) / (totalSteps - 1)) * 100;
        document.getElementById("progress-bar").style.width = `${progress}%`;
    };

    const navigateToStep = (step) => {
        if (step >= 1 && step <= totalSteps) {
            state.updateStep(step);
            history.pushState({ step: state.currentStep }, "", `#step-${state.currentStep}`);
        }
    };

    const handleNextStep = () => {
        if (state.currentStep < totalSteps) navigateToStep(state.currentStep + 1);
        else if (state.currentStep === totalSteps) showSummary();
    };

    const handleBackStep = () => {
        if (state.currentStep > 1) navigateToStep(state.currentStep - 1);
    };

    const handleEnterKey = (event) => {
        if (event.key === "Enter" && event.target.matches("input[type='text']")) {
            event.preventDefault();
            document.querySelector(".next-step").click();
        }
    };

    const showSummary = () => {
        const summaryContainer = document.getElementById('summary-container');
        const nextButton = document.querySelector('.next-step');
        const confirmCheckbox = document.getElementById('confirm-info');
        
        nextButton.disabled = true;
        
        confirmCheckbox.addEventListener('change', function() {
            nextButton.disabled = !this.checked;
        });
    
        const { gender, age, height, weight, targetWeight, goal, activity, meals } = state.formData;
        const goalText = { "weight-loss": "کاهش وزن", "weight-gain": "افزایش وزن", "fitness": "تناسب اندام"}[goal];
        const activityText = { "very-low": "خیلی کم (کمتر از 1 ساعت)", "low": "کم (1 تا 2 ساعت)", "medium": "متوسط (2 تا 4 ساعت)", "high": "زیاد (بیشتر از 4 ساعت)" }[activity];
        const mealsText = { "2": "۲ وعده", "3": "۳ وعده", "4": "۴ وعده", "more": "بیشتر" }[meals];
        
        // جمع آوری اطلاعات additional-info
        const additionalInfo = [];
        if (document.getElementById('info-diabetes').checked) additionalInfo.push('دیابت');
        if (document.getElementById('info-pressure').checked) additionalInfo.push('فشار خون');
        if (document.getElementById('info-thyroid').checked) additionalInfo.push('مشکلات تیروئید');
        if (document.getElementById('info-allergy').checked) additionalInfo.push('حساسیت غذایی');
        if (document.getElementById('info-none').checked) additionalInfo.push('هیچکدام');
        
        // جمع آوری اطلاعات food-restriction
        const foodRestrictions = [];
        if (document.getElementById('restriction-vegetarian').checked) foodRestrictions.push('گیاهخواری');
        if (document.getElementById('restriction-no-seafood').checked) foodRestrictions.push('عدم مصرف غذای دریایی');
        if (document.getElementById('restriction-none').checked) foodRestrictions.push('بدون محدودیت');
        
        summaryContainer.innerHTML = `
            <div class="summary-item">
                <span class="summary-label">جنسیت:</span>
                <span class="summary-value">${gender === "male" ? "مرد" : "زن"}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">سن:</span>
                <span class="summary-value">${age} سال</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">قد:</span>
                <span class="summary-value">${height} سانتی‌متر</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">وزن فعلی:</span>
                <span class="summary-value">${weight} کیلوگرم</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">وزن هدف:</span>
                <span class="summary-value">${targetWeight || 'ثبت نشده'} کیلوگرم</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">هدف:</span>
                <span class="summary-value">${goalText}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">فعالیت روزانه:</span>
                <span class="summary-value">${activityText}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">تعداد وعده‌های غذایی:</span>
                <span class="summary-value">${mealsText}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">اطلاعات تکمیلی:</span>
                <span class="summary-value">${additionalInfo.join('، ') || 'ثبت نشده'}</span>
            </div>
            <div class="summary-item">
                <span class="summary-label">محدودیت‌های غذایی:</span>
                <span class="summary-value">${foodRestrictions.join('، ') || 'ثبت نشده'}</span>
            </div>
        `;
    };

    const setupInput = (inputId, displayId, field) => {
        const input = document.getElementById(inputId);
        const display = document.getElementById(displayId);

		const updateDisplay = (value) => {
			display.textContent = value ? `${value} ${field === "age" ? "سال" : field === "height" ? "سانتی‌متر" : "کیلوگرم"}` : `0 ${field === "age" ? "سال" : field === "height" ? "سانتی‌متر" : "کیلوگرم"}`;
			display.style.color = value ? "#000" : "#999";
			state.updateFormData(field, value ? parseInt(value) : null);
			
			// Calculate BMI when both height and weight are available
			if (field === "weight" && state.formData.height && value) {
				calculateBMI(state.formData.height, parseInt(value));
			}
		};

        if (field === "weight" && state.formData.height && value) {
            calculateBMI(state.formData.height, parseInt(value));
        }
		
        input.addEventListener("input", () => {
            let value = input.value.replace(/\D/g, "");
            if (field === "age" && value.length > 2) value = value.slice(0, 2);
            else if ((field === "height" || field === "weight") && value.length > 3) value = value.slice(0, 3);
            input.value = value;
            updateDisplay(value);
            if (input.type === "text") setTimeout(() => input.setSelectionRange(value.length, value.length), 0);
            validateStep(state.currentStep);
        });

        input.addEventListener("click", () => {
            const value = input.value.replace(/\D/g, "");
            if (input.type === "text") input.setSelectionRange(value.length, value.length);
        });

        input.addEventListener("blur", () => {
            const value = input.value.trim();
            if (!value) updateDisplay("");
            validateStep(state.currentStep);
        });
    };

    const calculateBMI = (height, weight) => {
        const heightInMeters = height / 100;
        const bmiValue = document.getElementById('bmi-value');
        const bmiCategory = document.getElementById('bmi-category');
        const bmiIndicator = document.getElementById('bmi-indicator');
        const bmiContainer = document.getElementById('bmi-result-container');
        
        // Hide BMI section if weight is 0 or not entered
        if (!weight || weight === 0) {
            bmiContainer.style.opacity = '0.5';
            bmiIndicator.style.display = 'none';
            bmiValue.textContent = '0';
            bmiCategory.textContent = '';
            return;
        } else {
            bmiContainer.style.opacity = '1';
            bmiIndicator.style.display = 'block';
        }
        
        const bmi = (weight / (heightInMeters * heightInMeters)).toFixed(1);
        bmiValue.textContent = bmi;
        
        // Set BMI category
        const categories = [
            { max: 18.5, text: 'کمبود وزن', color: '#4fc3f7' },
            { max: 25, text: 'وزن نرمال', color: '#66bb6a' },
            { max: 30, text: 'اضافه وزن', color: '#ffee58' },
            { max: 35, text: 'چاق', color: '#ffa726' },
            { max: Infinity, text: 'چاقی شدید', color: '#ef5350' }
        ];
        
        const category = categories.find(c => bmi < c.max);
        bmiCategory.textContent = category.text;
        bmiCategory.style.color = category.color;
        
        // Calculate indicator position
        let position;
        if (bmi < 18.5) {
            position = (bmi / 18.5) * 20;
        } else if (bmi < 25) {
            position = 20 + ((bmi - 18.5) / 6.5) * 20;
        } else if (bmi < 30) {
            position = 40 + ((bmi - 25) / 5) * 20;
        } else if (bmi < 35) {
            position = 60 + ((bmi - 30) / 5) * 20;
        } else {
            position = 80 + ((Math.min(bmi, 50) - 35) / 15) * 20;
        }
        
        // Smooth animation
        bmiIndicator.classList.add('animate-indicator');
        setTimeout(() => {
            bmiIndicator.style.left = `${Math.min(position, 100)}%`;
            bmiIndicator.style.transform = 'translateX(-50%)';
        }, 10);
        
        setTimeout(() => {
            bmiIndicator.classList.remove('animate-indicator');
        }, 800);
    };

    const setupOptionSelection = (selector, key) => {
        document.querySelectorAll(selector).forEach(el => {
            el.addEventListener("click", () => {
                const confirmCheckbox = document.getElementById("confirm-terms");
                if (!confirmCheckbox.checked) {
                    alert("لطفاً ابتدا شرایط استفاده را تأیید کنید");
                    return;
                }
    
                document.querySelectorAll(selector).forEach(opt => {
                    opt.classList.remove("selected");
                    opt.style.transform = "";
                    opt.style.boxShadow = "";
                });
                
                el.classList.add("selected");
                el.classList.add("selected-with-effect");
                
                setTimeout(() => {
                    el.classList.remove("selected-with-effect");
                    state.updateFormData(key, el.dataset[key]);
                    
                    el.style.transform = "translateY(-3px)";
                    el.style.boxShadow = "0 10px 20px rgba(0, 133, 122, 0.2)";
                    
                    setTimeout(() => {
                        navigateToStep(state.currentStep + 1);
                    }, 250); // زمان انتظار برای رفتن به مرحله بعد نصف شد
                }, 150); // زمان انیمیشن انتخاب نصف شد
            });
        });
    };

    navigateToStep(state.currentStep);
    document.querySelector(".next-step").addEventListener("click", handleNextStep);
    document.getElementById("back-button").addEventListener("click", handleBackStep);
    window.addEventListener("popstate", (event) => {
        if (event.state?.step) state.updateStep(event.state.step);
        else navigateToStep(1);
    });

    setupInput("age-input", "age-display", "age");
    setupInput("height-input", "height-display", "height");
    setupInput("weight-input", "weight-display", "weight");
    setupInput("target-weight-input", "target-weight-display", "targetWeight");

    setupOptionSelection(".gender-option", "gender");
    setupOptionSelection(".goal-option", "goal");
    setupOptionSelection(".activity-option", "activity");
    setupOptionSelection(".meal-option", "meals");

    document.addEventListener("keydown", handleEnterKey);
});
-----------------------------------------------------------------------------------------------------
/*/home/aidastya/public_html/wp-content/themes/woodmart-child/assets/css/style.css*/
@font-face {
    font-family: Vazir;
    src: url('../fonts/Vazir.woff2') format('woff2'),
         url('../fonts/Vazir.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: BordeauxBlack;
    src: url('../fonts/BordeauxBlack.woff2') format('woff2'),
         url('../fonts/BordeauxBlack.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

:root {
    --primary-color: #00857a;
    --secondary-color: #00665c;
    --background-color: #f5f5f5;
    --text-color: #333;
    --border-color: #e0e0e0;
    --error-background: #e6f3ff;
    --error-border: #b3d7ff;
    --valid-background: #e6f4ea;
    --valid-border: #34c759;
    --valid-text: #2e7d32;
    --input-focus-bg: #e0f2f1;
    --input-focus-border: #00857a;
    --option-bg: #f0faf9;
    --option-selected-bg: #FFF7DF;
    --option-selected-border: #EEB600;
    --button-bg: #97e0db;
    --button-hover-bg: #00665c;
    --button-text: #fff;
    --progress-bar-bg: #e0e0e0;
    --progress-bar-fill: #F4C017;
    --orange-color: #FFA500;
    --orange-shadow: rgba(255, 165, 0, 0.3);
    --orange-light-shadow: rgba(255, 165, 0, 0.15);
    --white-color: #fff;
    --shadow-color: rgba(0, 0, 0, 0.05);
    --light-shadow: rgba(0, 0, 0, 0.1);
    --pulse-glow: rgba(0, 133, 122, 0.4);
    --transparent: transparent;
}

body {
    font-family: Vazir, Tahoma, sans-serif;
    background-color: var(--background-color);
    color: var(--text-color);
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden;
    direction: rtl;
}

#multi-step-form {
    width: 100%;
    max-width: 500px;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    background: var(--white-color);
    position: relative;
    overflow: hidden;
    justify-content: flex-start;
    padding-top: 60px;
    margin: 0 auto;
}

#header-container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100%;
    max-width: 1032px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 1;
    background: var(--white-color);
    padding: 10px 20px;
    box-sizing: border-box;
}

#step-counter {
    font-size: 14px;
    font-weight: 300;
    color: var(--text-color);
}

#current-step {
    color: var(--primary-color);
}

#header-container::before {
    content: "AiDASTYAR";
    font-family: BordeauxBlack, sans-serif;
    font-size: 24px;
    color: var(--primary-color);
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

#back-button {
    background: none;
    border: none;
    font-size: 30px;
    color: var(--primary-color);
    cursor: pointer;
    padding: 0;
}

#back-button:hover {
    color: var(--secondary-color);
}

#progress-bar-container {
    position: fixed;
    top: 60px;
    left: 0;
    right: 0;
    width: calc(100% - 40px);
    max-width: 1032px;
    height: 4px;
    margin: 0 auto;
    background-color: var(--progress-bar-bg);
    border-radius: 3px;
    overflow: hidden;
}

@media (max-width: 1032px) {
    #header-container {
        padding: 10px 15px;
    }
    
    #progress-bar-container {
        width: calc(100% - 30px);
    }
}

#progress-bar {
    height: 100%;
    width: 0%;
    background-color: var(--progress-bar-fill);
    border-radius: 3px;
    transition: width .3s ease;
}

.step {
    display: none;
    width: 100%;
    text-align: center;
    padding: 0 15px;
}

.step.active {
    display: block;
}

#form-title {
    font-size: 24px;
    font-weight: bold;
    color: var(--text-color);
    margin-bottom: 20px;
    position: fixed;
    top: 80px;
    left: 0;
    right: 0;
    text-align: center;
}

h2 {
    font-size: 17px;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: right;
    width: 100%;
    max-width: 500px;
    margin-right: auto;
    margin-left: auto;
    padding-right: 15px;
    box-sizing: border-box;
}

@media (min-width: 768px) {
    h2 {
        padding-right: 0;
    }
}

.input-container {
    position: relative;
    display: inline-block;
    width: 100%;
    max-width: 500px;
    text-align: right;
}

.input-container input {
    width: 100%;
    padding: 15px;
    text-align: right;
    font-size: 16px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--transparent);
    color: var(--transparent);
    caret-color: #000;
    box-sizing: border-box;
    transition: background-color .3s, border-color .3s;
    direction: ltr;
}

.input-container input:focus {
    background-color: var(--input-focus-bg);
    border-color: var(--input-focus-border);
    outline: none;
}

.input-container span {
    position: absolute;
    left: auto;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #999;
    font-size: 16px;
    white-space: nowrap;
}

.error-message {
    color: var(--text-color);
    background-color: var(--error-background);
    padding: 10px 15px;
    border-radius: 8px;
    border: 1px solid var(--error-border);
    font-size: 14px;
    margin-top: 10px;
    width: 100%;
    max-width: 500px;
    box-sizing: border-box;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    display: flex;
    margin-left: auto;
    margin-right: auto;
}

.error-message.valid {
    background-color: var(--valid-background);
    border-color: var(--valid-border);
    color: var(--valid-text);
}

.error-message .tick-icon {
    display: none;
    width: 16px;
    height: 16px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%232e7d32"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/></svg>');
    background-repeat: no-repeat;
    background-size: contain;
    margin-left: 8px;
}

.error-message.valid .tick-icon {
    display: inline-block;
}

#goal-selection,
#activity-selection,
#meal-selection {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
    width: 100%;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
    text-align: right;
}

.goal-option,
.activity-option,
.meal-option {
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
    text-align: right;
    direction: rtl;
    padding: 15px;
    justify-content: flex-end;
    border: 1.5px solid var(--input-focus-bg);
    border-radius: 8px;
    background-color: var(--option-bg);
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.goal-option img,
.activity-option img,
.meal-option img {
    width: 60px;
    height: 30px;
    object-fit: contain;
    margin-left: 15px;
}

.goal-option span,
.activity-option span,
.meal-option span {
    flex: 1;
    text-align: right;
    font-size: 12px;
    font-weight: bold;
}

.goal-option.selected,
.activity-option.selected,
.meal-option.selected {
    border-color: var(--orange-color);
    background-color: var(--option-selected-bg);
    transform: scale(1.02);
    box-shadow: 0 5px 15px var(--orange-shadow);
}

#next-button-container {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--white-color);
    padding: 15px 20px;
    text-align: center;
    box-shadow: 0 -2px 10px var(--shadow-color);
}

button.next-step {
    width: 100%;
    max-width: 500px;
    padding: 18px;
    border: none;
    border-radius: 8px;
    background-color: var(--button-bg);
    color: var(--button-text);
    font-size: 18px;
    cursor: pointer;
    transition: background-color .3s;
}

button.next-step:not(:disabled) {
    background-color: var(--primary-color);
}

button.next-step:not(:disabled):hover {
    background-color: var(--button-hover-bg);
}

button.next-step:disabled {
    cursor: not-allowed;
    opacity: 0.7;
}

#additional-info-selection,
#food-restriction-selection {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
    max-width: 500px;
    margin: 20px auto;
}

.checkbox-container {
    position: relative;
}

.real-checkbox {
    position: absolute;
    opacity: 0;
}

.checkbox-label {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border: 1.5px solid var(--input-focus-bg);
    border-radius: 8px;
    background-color: var(--option-bg);
    color: var(--text-color);
    font-size: 16px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.checkbox-label:hover {
    background-color: var(--option-selected-bg);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px var(--light-shadow);
}

.check-icon {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid var(--border-color);
    border-radius: 4px;
    margin-left: 10px;
    position: relative;
    transition: all 0.3s ease;
}

.real-checkbox:checked + .checkbox-label .check-icon {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.real-checkbox:checked + .checkbox-label .check-icon::after {
    content: "";
    position: absolute;
    left: 5px;
    top: 1px;
    width: 6px;
    height: 12px;
    border: solid var(--white-color);
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
}

.real-checkbox:checked + .checkbox-label {
    background-color: var(--option-selected-bg);
    border-color: var(--orange-color);
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 4px 12px var(--orange-light-shadow);
}

.label-text {
    flex: 1;
    text-align: right;
}

.separator {
    position: relative;
    height: 1px;
    margin: 20px 0;
    background: linear-gradient(to right, var(--transparent), var(--border-color), var(--transparent));
}

.separator::after {
    content: "یا";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: var(--white-color);
    padding: 0 15px;
    color: var(--text-color);
    font-size: 14px;
}

#summary-container {
    max-height: calc(60vh - 100px);
    overflow-y: auto;
    margin-top: 20px;
    width: 100%;
    padding-bottom: 20px;
    max-width: 500px;
    
    margin: 20px auto;
    box-sizing: border-box;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    padding: 12px 15px;
    margin: 8px 0;
    background-color: var(--option-bg);
    border-radius: 8px;
    font-size: 16px;
    max-width: 500px;
}

.summary-label {
    font-weight: bold;
    color: var(--primary-color);
}

.summary-value {
    color: var(--text-color);
}

#confirmation-checkbox {
    margin: 20px auto;
    width: 100%;
    max-width: 500px;
    padding: 0 20px;
    box-sizing: border-box;
}

#confirmation-checkbox .checkbox-label {
    background-color: var(--valid-background);
    border-color: var(--valid-border);
    padding: 15px;
    margin-bottom: 20px;
}

#gender-selection {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin: 30px 0;
    flex-wrap: nowrap;
    padding: 0;
}

#gender-selection-step h2 {
    margin-top: 90px;
    text-align: center;
}

#gender-selection-step h1 {
    font-size: 18px;
}

.gender-option {
    cursor: pointer;
    text-align: center;
    border: 2px solid var(--transparent);
    border-radius: 10px;
    padding: 10px;
    transition: all 0.3s ease;
    flex: 1;
    max-width: 120px;
    opacity: 0.5;
    pointer-events: none;
    filter: grayscale(80%);
    transform: scale(0.95);
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
}

.gender-option.active {
    opacity: 1;
    pointer-events: auto;
    filter: none;
}

.gender-option.selected {
    border-color: var(--primary-color);
    transform: scale(1.05);
    box-shadow: 0 10px 25px rgba(0, 133, 122, 0.3);
}

.gender-option img {
    width: 100%;
    height: auto;
    border-radius: 50%;
}

#terms-checkbox {
    width: 95%;
    max-width: 500px;
    margin: 20px auto;
}

@media (min-width: 768px) {
    .terms-combined {
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }
}

.terms-combined {
    margin: 15px 0;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 8px;
    background: var(--option-bg);
}

.terms-combined .checkbox-label {
    border: none;
    background: transparent;
    padding: 10px 5px;
    margin-bottom: 5px;
}

.terms-combined .terms-box {
    max-height: 120px;
    margin: 0;
    border: none;
    border-top: 1px dashed var(--border-color);
    border-radius: 0;
    padding: 8px 5px 0 5px;
    font-size: 12px;
    overflow-y: auto;
}

.terms-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
    text-align: justify;
    line-height: 1.5;
    padding-right: 8px;
}

.terms-list li {
    position: relative;
    margin-bottom: 5px;
    padding-right: 25px;
    font-size: 11px;
    line-height: 1.4;
}

.terms-list li:before {
    content: "";
    position: absolute;
    right: 0;
    top: 5px;
    width: 12px;
    height: 12px;
    background-size: contain;
    background-repeat: no-repeat;
}

.terms-list li:nth-child(1):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>');
}

.terms-list li:nth-child(2):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>');
}

.terms-list li:nth-child(3):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg>');
}

.terms-list li:nth-child(4):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11V11.99z"/></svg>');
}

@keyframes checkBounce {
    0% { transform: scale(0.8); opacity: 0.5; }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); opacity: 1; }
}

@keyframes pulseGlow {
    0% { box-shadow: 0 0 0 0 var(--pulse-glow); }
    70% { box-shadow: 0 0 0 10px var(--transparent); }
    100% { box-shadow: 0 0 0 0 var(--transparent); }
}

.checked-animation .check-icon {
    animation: checkBounce 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.checked-animation {
    animation: pulseGlow 0.8s ease;
    border-color: var(--orange-color);
}

@media (min-width: 768px) {
    body {
        background-color: var(--white-color);
    }
    
    .input-container,
    #goal-selection,
    #activity-selection,
    #meal-selection,
    button.next-step {
        width: 500px;
    }
}

.info-text {
    display: flex;
    flex-direction: column;
    gap: 8px;
    text-align: right;
    direction: rtl;
    line-height: 1.6;
    font-size: 14px;
    flex-grow: 1;
    width: 100%;
}

.first-line {
    font-weight: 500;
    text-align: justify;
    text-align-last: right;
}

.second-line {
    color: #555;
    text-align: right;
    padding-right: 0;
    margin-right: 0;
    display: block;
    width: 100%;
    text-align: justify;
}

.info-content {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    width: 100%;
}

.info-box {
    background-color: var(--error-background);
    border: 1px solid var(--error-border);
    border-radius: 8px;
    padding: 15px;
    width: calc(100% - 30px);
    max-width: 500px;
    margin-top: 10px;
}

#age-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#age-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#age-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

.separator-dotted {
    height: 1px;
    background: repeating-linear-gradient(
        to right,
        var(--border-color),
        var(--border-color) 2px,
        transparent 2px,
        transparent 4px
    );
    margin: 0 15px;
}

#height-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#height-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#height-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

#weight-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#weight-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#weight-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

#bmi-result-container {
    padding: 15px;
    margin-bottom: 15px;
}

.bmi-info {
    text-align: center;
    margin-bottom: 20px;
}

.bmi-info h3 {
    font-size: 18px;
    color: var(--primary-color);
    margin-bottom: 5px;
}

.bmi-category {
    font-size: 16px;
    font-weight: bold;
}

.bmi-scale-container {
    margin-top: 20px;
}

.bmi-scale-labels {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
    font-size: 12px;
    color: #666;
    direction: ltr;
}

.bmi-scale {
    height: 20px;
    background: linear-gradient(to right, 
        #4fc3f7, 
        #66bb6a 20%, 
        #ffee58 40%, 
        #ffa726 60%, 
        #ef5350 80%);
    border-radius: 10px;
    position: relative;
    overflow: hidden;
}

.bmi-indicator {
    position: absolute;
    top: -8px;
    width: 6px;
    height: 34px;
    background: linear-gradient(to bottom, #555, #222);
    border-radius: 3px;
    transform: translateX(-50%);
    transition: left 0.6s cubic-bezier(0.25, 0.1, 0.25, 1);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    display: none;
    z-index: 2;
}

.bmi-indicator::after {
    content: '';
    position: absolute;
    top: -10px;
    left: -5px;
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 10px solid #222;
    filter: drop-shadow(0 2px 2px rgba(0,0,0,0.2));
}

#bmi-result-container {
    transition: opacity 0.3s ease;
}

#target-weight-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#target-weight-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#target-weight-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

#goal-result {
    width: 100%;
    max-width: 600px;
    margin: 30px auto;
    text-align: center;
}

.chart-container {
    position: relative;
    width: 100%;
    height: 400px;
    min-height: 300px;
    margin: 0 auto;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.8s ease-out;
}

.chart-container.animate-chart {
    opacity: 1;
    transform: translateY(0);
}

.chart-message {
    margin-top: 30px;
    padding: 15px;
    background-color: rgba(0, 133, 122, 0.1);
    border-radius: 8px;
    font-size: 15px;
    line-height: 1.6;
    color: var(--text-color);
    border-right: 3px solid var(--primary-color);
    text-align: justify;
}

@media (min-width: 768px) {
    .chart-container {
        height: 400px;
    }
    
    .chart-message {
        font-size: 16px;
        padding: 20px;
    }
}

@media (max-width: 768px) {
    .chart-container {
        height: 60vh !important;
        max-height: 500px;
        min-height: 350px;
    }
    
    #goal-result {
        margin: 20px auto;
    }
    
    .chart-message {
        margin-top: 20px;
        padding: 12px;
        font-size: 14px;
    }
}
-----------------------------------------------------------------------------------------------------
<?php
// Check if user is logged in
if (!is_user_logged_in()) {
    wp_redirect(wp_login_url()); // Redirect to login page
    exit;
}

// Load the form HTML
include 'form.html';
?>
-----------------------------------------------------------------------------------------------------

این کد رو ببین. 
لطفا کدهای css ی که استفاده نشدن رو حذف کن