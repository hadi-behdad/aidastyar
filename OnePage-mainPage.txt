<!--/home/aidastya/public_html/wp-content/themes/ai-assistant/services/diet/template-parts/form.php-->
<?php
$theme_assets = get_stylesheet_directory_uri();
?>

<form id="multi-step-form" class="ai-multistep-form" method="post" action="<?php echo admin_url('admin-ajax.php'); ?>">
    <input type="hidden" name="action" value="submit_diet_form">
    <?php wp_nonce_field('diet_form_nonce', 'diet_form_security'); ?>
    
    <div id="header-container">
        <div id="step-counter"><span id="current-step">1</span>/<span id="total-steps">12</span></div>
        <button type="button" id="back-button">›</button>
    </div>
    
    <div id="progress-bar-container">
        <div id="progress-bar"></div>
    </div>

    <!-- Step 1: Gender Selection -->
    <div id="gender-selection-step" class="step active">
        <h1 id="form-title">سیستم هوشمند رژیم غذایی هوش مصنوعی</h1>
        <h2>جنسیت خود را انتخاب کنید</h2>
        <div id="gender-selection">
            <div class="gender-option" data-gender="male"><img src="<?php echo $theme_assets; ?>/assets/images/webp/male.webp" alt="مرد"></div>
            <div class="gender-option" data-gender="female"><img src="<?php echo $theme_assets; ?>/assets/images/webp/female.webp" alt="زن"></div>
        </div>
    
        <div id="terms-checkbox" class="checkbox-container terms-combined">
            <input type="checkbox" id="confirm-terms" class="real-checkbox">
            <label for="confirm-terms" class="checkbox-label">
                <span class="check-icon"></span>
                <span class="label-text">شرایط و قوانین را می‌پذیرم</span>
            </label>
            <div class="terms-box">
                <ul class="terms-list">
                    <li>اطلاعات سلامت و شخصی من، با حداکثر امنیت و مطابق قوانین محرمانگی، نزد این سامانه محفوظ خواهد ماند.</li>
                    <li>توصیه‌های این سیستم توسط پیشرفته‌ترین الگوریتم‌های هوش مصنوعی ارائه می‌شود، اما جایگزین تشخیص پزشک نیست.</li>
                    <li>مسئولیت نهایی تصمیمات سلامت و استفاده از این توصیه‌ها بر عهده خودم است.</li>
                    <li>متعهد می‌شوم برای مسائل پزشکی مهم، حتماً با پزشک معتمدم مشورت کنم.</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Step 2: Goal Selection -->
    <div id="goal-selection-step" class="step">
        <h2>هدف شما از این برنامه غذایی چیست؟</h2>
        <p class="step-description">لطفاً هدف اصلی خود را از دنبال کردن این رژیم انتخاب کنید</p>
        
        <div id="goal-selection">
            <div class="goal-option" data-goal="weight-loss">
                <div class="goal-icon" data-meals="2">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/lose-weight-min.png" alt="کاهش وزن">
                </div>
                <div class="goal-details">
                    <h3>کاهش وزن</h3>
                    <p>برنامه‌ای برای رسیدن به وزن ایده‌آل و سالم</p>
                </div>
            </div>
            
            <div class="goal-option" data-goal="weight-gain">
                <div class="goal-icon" data-meals="2">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" alt="افزایش وزن">
                </div>
                <div class="goal-details">
                    <h3>افزایش وزن سالم</h3>
                    <p>برنامه‌ای برای افزایش وزن اصولی و عضله‌سازی</p>
                </div>
            </div>
            
            <div class="goal-option" data-goal="fitness">
                <div class="goal-icon" data-meals="2">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/stay-fit-min.png" alt="حفظ سلامت">
                </div>
                <div class="goal-details">
                    <h3>حفظ سلامت و تناسب</h3>
                    <p>برنامه‌ای برای حفظ وزن فعلی و بهبود سلامت عمومی</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 3: Age Input -->
    <div id="age-input-step" class="step">
        <h2>سن شما چند سال است؟</h2>
        <div class="input-container">
            <input type="text" inputmode="numeric" id="age-input">
            <span id="age-display">0 سال</span>
        </div>
        <div id="age-validation-container">
            <p id="age-error" class="error-message"></p>
            <div class="separator-dotted"></div>
            <div class="info-box">
                <div class="info-content">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/age-min.png" width="30" height="30" alt="سن">
                    <div class="info-text">
                        <span class="first-line">سن شما را می‌پرسیم تا برنامه شخصی شما را ایجاد کنیم.</span>
                        <span class="second-line">افراد مسن‌تر نسبت به افراد جوان‌تر با همان شاخص توده بدنی (BMI)، معمولاً چربی بدن بیشتری دارند</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 4: Height Input -->
    <div id="height-input-step" class="step">
        <h2>قد شما چقدر است؟</h2>
        <div class="input-container">
            <input type="text" inputmode="numeric" id="height-input">
            <span id="height-display">0 سانتی‌متر</span>
        </div>
        <div id="height-validation-container">
            <p id="height-error" class="error-message"></p>
            <div class="separator-dotted"></div>
            <div class="info-box">
                <div class="info-content">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/height-min.png" width="30" height="30" alt="قد">
                    <div class="info-text">
                        <span class="first-line">محاسبه شاخص توده بدنی شما</span>
                        <span class="second-line">شاخص توده بدنی (BMI) به طور گسترده به عنوان یک معیار برای سنجش خطر ابتلا یا شیوع برخی مشکلات سلامتی مورد استفاده قرار می‌گیرد</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 5: Weight Input -->
    <div id="weight-input-step" class="step">
        <h2>وزن شما چقدر است؟</h2>
        <div class="input-container">
            <input type="text" inputmode="numeric" id="weight-input">
            <span id="weight-display">0 کیلوگرم</span>
        </div>
        <div id="weight-validation-container">
            <p id="weight-error" class="error-message"></p>
            <div class="separator-dotted"></div>
            <div id="bmi-result-container">
                <div class="bmi-info">
                    <h3>شاخص توده بدنی (BMI) شما: <span id="bmi-value">0</span></h3>
                    <p id="bmi-category" class="bmi-category"></p>
                </div>
                <div class="bmi-scale-container">
                    <div class="bmi-scale-labels">
                        <span>کمبود وزن</span>
                        <span>نرمال</span>
                        <span>اضافه وزن</span>
                        <span>چاق</span>
                        <span>چاقی شدید</span>
                    </div>
                    <div class="bmi-scale">
                        <div id="bmi-indicator" class="bmi-indicator"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 6: Target Weight -->
    <div id="target-weight-step" class="step">
        <h2>وزن هدف شما چقدر است؟</h2>
        <div class="input-container">
            <input type="text" inputmode="numeric" id="target-weight-input">
            <span id="target-weight-display">0 کیلوگرم</span>
        </div>
        <div id="target-weight-validation-container">
            <p id="targetWeight-error" class="error-message"></p>
            <div class="separator-dotted"></div>
            <div class="info-box">
                <div class="info-content">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" width="30" height="30" alt="وزن هدف">
                    <div class="info-text">
                        <span class="first-line">وزن هدف شما را می‌پرسیم تا برنامه مناسب برای رسیدن به آن را طراحی کنیم.</span>
                        <span class="second-line">لطفاً وزن واقع‌بینانه‌ای را وارد کنید که با قد و ساختار بدنی شما تناسب داشته باشد</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 7: Goal Weight Display -->
    <div id="goal-weight-display" class="step">
        <div class="step7-image-container">
            <div class="goal-title-container">
                <h2 class="goal-title" id="goal-title-text">هدف: در حال بارگذاری...</h2>
            </div>
            <div class="weight-display-container">
                <div class="weight-display-box current-weight">
                    <div class="weight-value">${state.formData.weight || 0}</div>
                    <div class="weight-unit">کیلوگرم</div>
                    <div class="weight-label">وزن فعلی شما</div>
                </div>
                <div class="weight-display-box target-weight">
                    <div class="weight-value">${state.formData.targetWeight || 0}</div>
                    <div class="weight-unit">کیلوگرم</div>
                    <div class="weight-label">وزن هدف شما</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 8: Surgery History -->
    <div id="surgery-step" class="step checkbox-step-container">
        <h2>سابقه جراحی یا عمل‌های پزشکی مهم</h2>        
        <div class="checkbox-container first-option stand-alone-none">
            <input type="checkbox" id="surgery-none" class="real-checkbox">
            <label for="surgery-none" class="checkbox-label">
                <span class="check-icon"></span>
                <span class="label-text">هیچگونه سابقه جراحی ندارم</span>
            </label>
        </div> 
        
        <div class="separator"></div>
        <div id="surgery-selection" class="checkbox-selection-container checkbox-list-container">
            <h3 class="diffrent-category-titles" style="margin-top: 0px;">جراحی‌های متابولیک و گوارشی</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-metabolic" class="real-checkbox">
                <label for="surgery-metabolic" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی متابولیک (بایپس معده، اسلیو)</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-gallbladder" class="real-checkbox">
                <label for="surgery-gallbladder" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی کیسه صفرا</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-intestine" class="real-checkbox">
                <label for="surgery-intestine" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی روده (رزکسیون، ایلئوستومی)</span>
                </label>
            </div>
            
            <h3 class="diffrent-category-titles">جراحی‌های غدد و اندام‌ها</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-thyroid" class="real-checkbox">
                <label for="surgery-thyroid" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی تیروئید/پاراتیروئید</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-pancreas" class="real-checkbox">
                <label for="surgery-pancreas" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی لوزالمعده (پانکراس)</span>
                </label>
            </div>
            
            <h3 class="diffrent-category-titles female-only">جراحی‌های زنان</h3>
            <div class="checkbox-container female-only">
                <input type="checkbox" id="surgery-gynecology" class="real-checkbox">
                <label for="surgery-gynecology" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی‌های زنان (هیسترکتومی، اووفورکتومی)</span>
                </label>
            </div>
            
            <h3 class="diffrent-category-titles">جراحی‌های عمده</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-kidney" class="real-checkbox">
                <label for="surgery-kidney" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">پیوند کلیه</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-liver" class="real-checkbox">
                <label for="surgery-liver" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">پیوند کبد</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="surgery-heart" class="real-checkbox">
                <label for="surgery-heart" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">جراحی قلب</span>
                </label>
            </div>
        </div>
    </div>

    <!-- Step 9: Hormonal Disorders -->
    <div id="hormonal-disorders-step" class="step checkbox-step-container">
        <h2>آیا اختلال هورمونی خاصی دارید؟</h2>
        
        <div class="checkbox-container first-option stand-alone-none">
            <input type="checkbox" id="hormonal-none" class="real-checkbox">
            <label for="hormonal-none" class="checkbox-label">
                <span class="check-icon"></span>
                <span class="label-text">خیر</span>
            </label>
        </div>
        
        <div class="separator"></div>
        
        <div id="hormonal-selection" class="checkbox-selection-container checkbox-list-container scrollable-container">
            <!-- اختلالات تیروئید -->
            <h3 class="diffrent-category-titles" style="margin-top: 0px;">اختلالات تیروئید</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="hormonal-hypothyroidism" class="real-checkbox">
                <label for="hormonal-hypothyroidism" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">کم کاری تیروئید (هیپوتیروئیدی)</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="hormonal-hyperthyroidism" class="real-checkbox">
                <label for="hormonal-hyperthyroidism" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">پرکاری تیروئید (هیپرتیروئیدی)</span>
                </label>
            </div>
            
            <!-- اختلالات متابولیک -->
            <h3 class="diffrent-category-titles">اختلالات متابولیک</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="hormonal-diabetes" class="real-checkbox">
                <label for="hormonal-diabetes" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">دیابت نوع 1 یا 2</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="hormonal-insulin-resistance" class="real-checkbox">
                <label for="hormonal-insulin-resistance" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">مقاومت به انسولین</span>
                </label>
            </div>
            
            <!-- اختلالات زنانه -->
            <h3 class="diffrent-category-titles female-only">اختلالات زنانه</h3>
            <div class="checkbox-container female-only">
                <input type="checkbox" id="hormonal-pcos" class="real-checkbox">
                <label for="hormonal-pcos" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">سندرم تخمدان پلی کیستیک (PCOS)</span>
                </label>
            </div>
            <div class="checkbox-container female-only">
                <input type="checkbox" id="hormonal-menopause" class="real-checkbox">
                <label for="hormonal-menopause" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">یائسگی یا پیش یائسگی</span>
                </label>
            </div>
            
            <!-- سایر اختلالات -->
            <h3 class="diffrent-category-titles">سایر اختلالات</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="hormonal-cortisol" class="real-checkbox">
                <label for="hormonal-cortisol" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">مشکلات کورتیزول (استرس مزمن)</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="hormonal-growth" class="real-checkbox">
                <label for="hormonal-growth" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">اختلال هورمون رشد</span>
                </label>
            </div>
        </div>
    </div>

    <!-- Step 10: Stomach Discomfort -->
    <div id="stomach-discomfort-step" class="step checkbox-step-container">
        <h2>اخیرا مشکلات گوارشی داشته اید؟</h2>        
        
        <div class="checkbox-container first-option stand-alone-none">
            <input type="checkbox" id="stomach-none" class="real-checkbox">
            <label for="stomach-none" class="checkbox-label">
                <span class="check-icon"></span>
                <span class="label-text">خیر</span>
            </label>
        </div> 
        
        <div class="separator"></div>
        
        <div id="stomach-selection" class="checkbox-selection-container checkbox-list-container scrollable-container">
            <!-- مشکلات گوارشی -->
            <h3 class="diffrent-category-titles" style="margin-top: 0px;">مشکلات گوارشی</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-bloating" class="real-checkbox">
                <label for="stomach-bloating" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">نفخ یا گاز معده</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-pain" class="real-checkbox">
                <label for="stomach-pain" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">درد یا گرفتگی معده</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-heartburn" class="real-checkbox">
                <label for="stomach-heartburn" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">سوزش سر دل یا ترش کردن</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-nausea" class="real-checkbox">
                <label for="stomach-nausea" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">حالت تهوع</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-fullness" class="real-checkbox">
                <label for="stomach-fullness" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">سیری زودرس</span>
                </label>
            </div>            
            
            <!-- مشکلات هضم -->
            <h3 class="diffrent-category-titles">مشکلات هضم و جذب</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-indigestion" class="real-checkbox">
                <label for="stomach-indigestion" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">سوء هاضمه مزمن</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-constipation" class="real-checkbox">
                <label for="stomach-constipation" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">یبوست</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-diarrhea" class="real-checkbox">
                <label for="stomach-diarrhea" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">اسهال</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-slow-digestion" class="real-checkbox">
                <label for="stomach-slow-digestion" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">هضم کند غذا</span>
                </label>
            </div>

            <!-- حساسیت‌های غذایی -->
            <h3 class="diffrent-category-titles">واکنش‌های غذایی</h3>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-food-intolerance" class="real-checkbox">
                <label for="stomach-food-intolerance" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">عدم تحمل غذایی (لبنیات، گلوتن و...)</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="stomach-acid-reflux" class="real-checkbox">
                <label for="stomach-acid-reflux" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">رفلاکس اسید معده</span>
                </label>
            </div>            
        </div>
    </div>

    <!-- Step 11: Water Intake -->
    <div id="water-intake-step" class="step">
        <h2>به طور میانگین چه مقدار آب در روز می‌نوشید؟</h2>
        <div id="water-intake-container">
            <div class="water-cups-container">
                <!-- ردیف 1 -->
                <div class="water-cup-row">
                    <div class="water-cup" data-amount="1"></div>
                    <div class="water-cup" data-amount="2"></div>
                    <div class="water-cup" data-amount="3"></div>
                    <div class="water-cup" data-amount="4"></div>
                    <div class="water-cup" data-amount="5"></div>
                    <div class="water-cup" data-amount="6"></div>
                </div>
                <!-- ردیف 2 -->
                <div class="water-cup-row">
                    <div class="water-cup" data-amount="7"></div>
                    <div class="water-cup" data-amount="8"></div>
                    <div class="water-cup" data-amount="9"></div>
                    <div class="water-cup" data-amount="10"></div>
                    <div class="water-cup" data-amount="11"></div>
                    <div class="water-cup" data-amount="12"></div>
                </div>
                <!-- ردیف 3 -->
                <div class="water-cup-row">
                    <div class="water-cup" data-amount="13"></div>
                    <div class="water-cup" data-amount="14"></div>
                    <div class="water-cup" data-amount="15"></div>
                    <div class="water-cup" data-amount="16"></div>
                    <div class="water-cup" data-amount="17"></div>
                    <div class="water-cup" data-amount="18"></div>
                </div>
                <!-- ردیف 4 -->
                <div class="water-cup-row">
                    <div class="water-cup" data-amount="19"></div>
                    <div class="water-cup" data-amount="20"></div>
                    <div class="water-cup" data-amount="21"></div>
                    <div class="water-cup" data-amount="22"></div>
                    <div class="water-cup" data-amount="23"></div>
                    <div class="water-cup" data-amount="24"></div>
                </div>
                <!-- ردیف 5 -->
                <div class="water-cup-row">
                    <div class="water-cup" data-amount="25"></div>
                    <div class="water-cup" data-amount="26"></div>
                    <div class="water-cup" data-amount="27"></div>
                    <div class="water-cup" data-amount="28"></div>
                    <div class="water-cup" data-amount="29"></div>
                    <div class="water-cup" data-amount="30"></div>
                </div>
            </div>

            <div class="water-amount-display">
                <div id="water-amount-text" class="water-amount-text">
                    <span id="water-amount">0</span> لیوان در روز 
                    <span class="water-liter">(≈<span id="water-liter">0</span> لیتر)</span>
                </div>
                <div id="water-dont-know-text" class="dont-know-text" style="display:none;">
                    مقدار آب مصرفی مشخص نیست
                </div>
            </div>
            
            <div class="dont-know-container">
                <div class="checkbox-container first-option stand-alone-none">
                    <input type="checkbox" id="water-dont-know" class="real-checkbox">
                    <label for="water-dont-know" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">نمی‌دانم / مطمئن نیستم</span>
                    </label>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Step 12: Activity Level -->
    <div id="activity-selection-step" class="step">
        <h2>میزان فعالیت روزانه شما چقدر است؟</h2>
        <p class="step-description">برای دریافت برنامه غذایی دقیق، لطفاً سطح فعالیت بدنی خود را انتخاب کنید</p>
        
        <div id="activity-selection">
            <div class="activity-option" data-activity="very-low">
                <div class="activity-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/without-activity-min.png" alt="فعالیت خیلی کم">
                </div>
                <div class="activity-details">
                    <h3>سبک</h3>
                    <p>کمتر از 1 ساعت فعالیت در روز</p>
                    <span class="activity-examples">(پشت میز نشینی، تحرک بسیار کم)</span>
                </div>
            </div>
            
            <div class="activity-option" data-activity="low">
                <div class="activity-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/alittle-activity-min.png" alt="فعالیت کم">
                </div>
                <div class="activity-details">
                    <h3>نیمه فعال</h3>
                    <p>1 تا 2 ساعت فعالیت در روز</p>
                    <span class="activity-examples">(پیاده روی روزانه، کارهای سبک خانه)</span>
                </div>
            </div>
            
            <div class="activity-option" data-activity="medium">
                <div class="activity-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/middle-activity-min.png" alt="فعالیت متوسط">
                </div>
                <div class="activity-details">
                    <h3>فعال</h3>
                    <p>2 تا 4 ساعت فعالیت در روز</p>
                    <span class="activity-examples">(ورزش منظم، کارهای فیزیکی متوسط)</span>
                </div>
            </div>
            
            <div class="activity-option" data-activity="high">
                <div class="activity-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/alot-activity-min.png" alt="فعالیت زیاد">
                </div>
                <div class="activity-details">
                    <h3>خیلی فعال</h3>
                    <p>بیشتر از 4 ساعت فعالیت در روز</p>
                    <span class="activity-examples">(تمرینات سنگین، کارهای فیزیکی سخت)</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 13: Meal Frequency -->
    <div id="meal-selection-step" class="step">
        <h2>تعداد وعده‌های غذایی روزانه</h2>
        <p class="step-description">لطفاً تعداد وعده‌های غذایی که معمولاً در روز مصرف می‌کنید را انتخاب کنید</p>
        
        <div id="meal-selection" class="scrollable-container">
            <div class="meal-option" data-meals="2">
                <div class="meal-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" alt="۲ وعده">
                </div>
                <div class="meal-details">
                    <h3>۲ وعده</h3>
                    <p>صبحانه + شام</p>
                </div>
            </div>
            <div class="meal-option" data-meals="3">
                <div class="meal-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" alt="۳ وعده">
                </div>
                <div class="meal-details">
                    <h3>۳ وعده</h3>
                    <p>صبحانه + ناهار + شام</p>
                </div>
            </div>
            <div class="meal-option" data-meals="4">
                <div class="meal-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" alt="۴ وعده">
                </div>
                <div class="meal-details">
                    <h3>۴ وعده</h3>
                    <p>صبحانه + ناهار + عصرانه + شام</p>
                </div>
            </div>
            <div class="meal-option" data-meals="5">
                <div class="meal-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" alt="۵ وعده">
                </div>
                <div class="meal-details">
                    <h3>۵ وعده یا بیشتر</h3>
                    <p>وعده‌های اصلی + میان‌وعده‌ها</p>
                </div>
            </div>
            <div class="meal-option" data-meals="irregular">
                <div class="meal-icon">
                    <img src="<?php echo $theme_assets; ?>/assets/images/png/gain-weight-min.png" alt="نامنظم">
                </div>
                <div class="meal-details">
                    <h3>وعده‌های نامنظم</h3>
                    <p>زمان‌بندی ثابتی ندارم</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 14: Additional Info -->
    <div id="additional-info-step" class="step">
        <h2>اطلاعات تکمیلی</h2>
        <div id="additional-info-selection" class="checkbox-selection-container checkbox-list-container scrollable-container">
            <div class="checkbox-container first-option">
                <input type="checkbox" id="info-none" class="real-checkbox">
                <label for="info-none" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">هیچکدام از موارد زیر را ندارم</span>
                </label>
            </div>
            
            <div class="separator"></div>
            
            <div class="checkbox-container">
                <input type="checkbox" id="info-diabetes" class="real-checkbox">
                <label for="info-diabetes" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">دیابت</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="info-pressure" class="real-checkbox">
                <label for="info-pressure" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">فشار خون</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="info-thyroid" class="real-checkbox">
                <label for="info-thyroid" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">مشکلات تیروئید</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="info-allergy" class="real-checkbox">
                <label for="info-allergy" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">حساسیت غذایی</span>
                </label>
            </div>
        </div>
    </div>

    <!-- Step 15: Food Restrictions -->
    <div id="food-restriction-step" class="step">
        <h2>آیا محدودیت غذایی خاصی دارید؟</h2>
        <div id="food-restriction-selection" class="checkbox-selection-container checkbox-list-container scrollable-container">
            <div class="checkbox-container first-option">
                <input type="checkbox" id="restriction-none" class="real-checkbox">
                <label for="restriction-none" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">نه، محدودیت ندارم</span>
                </label>
            </div>
            
            <div class="separator"></div>
            
            <div class="checkbox-container">
                <input type="checkbox" id="restriction-vegetarian" class="real-checkbox">
                <label for="restriction-vegetarian" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">گیاهخوار هستم</span>
                </label>
            </div>
            <div class="checkbox-container">
                <input type="checkbox" id="restriction-no-seafood" class="real-checkbox">
                <label for="restriction-no-seafood" class="checkbox-label">
                    <span class="check-icon"></span>
                    <span class="label-text">غذای دریایی نمی‌خورم</span>
                </label>
            </div>
        </div>
    </div>

    <!-- Step 16: Terms Agreement -->
    <div id="terms-agreement-step" class="step">
        <h2>توافق‌نامه استفاده از خدمات Aidastyar</h2>
        <div id="terms-agreement-container">
            <div class="terms-agreement-content">
                <div class="terms-section">
                    <p>با ثبت‌نام، پرداخت یا استفاده از هر بخش خدمات Aidastyar، کاربر با مفاد این توافق‌نامه به‌صورت کامل، آگاهانه و غیرقابل رجوع موافقت می‌نماید.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۱. اهلیت قانونی و مسئولیت استفاده</h3>
                    <p>کاربر تأیید می‌کند بالای ۱۸ سال سن دارد و از نظر قانونی اختیار استفاده از خدمات را دارد.</p>
                    <p>در صورت استفاده افراد زیر ۱۸ سال، ثبت‌نام و پرداخت باید توسط والدین یا قیم قانونی انجام شود و مسئولیت کامل متوجه ایشان خواهد بود.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۲. ماهیت خدمات و حدود مسئولیت</h3>
                    <p>رژیم‌ها به‌صورت خودکار و فقط بر اساس داده‌های واردشده توسط کاربر، از طریق الگوریتم‌های هوش مصنوعی تولید می‌شوند.</p>
                    <p>این خدمات به هیچ‌وجه جایگزین مشاوره پزشکی یا تغذیه‌ای نیستند.</p>
                    <p>کاربر می‌پذیرد که ممکن است رژیم تولیدشده با وضعیت بدنی، پزشکی یا نیازهای خاص وی ناسازگار باشد.</p>
                    <p>کاربر موظف است در صورت داشتن بیماری خاص، مصرف دارو، بارداری یا وضعیت حساس پزشکی، پیش از استفاده با پزشک مشورت نماید.</p>
                    <div class="disclaimer-box">
                        <strong>سلب مسئولیت محدود:</strong>
                        <p>Aidastyar در چارچوب قوانین جاری جمهوری اسلامی ایران، تنها مسئول ارائه خدمات به شکلی است که در شرح آن آمده است و مسئولیتی در قبال نتایج شخصی، پزشکی، روحی یا روانی ناشی از اجرای رژیم ندارد، مگر در مواردی که بر اساس حکم قطعی مرجع قضایی، تقصیر مستقیم Aidastyar اثبات شود.</p>
                    </div>
                </div>
    
                <div class="terms-section">
                    <h3>۳. صحت اطلاعات</h3>
                    <p>کلیه اطلاعات واردشده باید دقیق و واقعی باشد.</p>
                    <p>مسئولیت پیامدهای ناشی از اطلاعات ناقص یا نادرست، کاملاً با کاربر است.</p>
                    <p>تغییر وضعیت سلامت باید به‌صورت فوری در سامانه ثبت شود؛ در غیر این‌صورت، رژیم معتبر نخواهد بود.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۴. تضمین نتایج و به‌روزرسانی</h3>
                    <p>هیچ تضمینی درباره کاهش وزن، بهبود بیماری یا موفقیت قطعی رژیم وجود ندارد.</p>
                    <p>الگوریتم‌ها ممکن است به‌روزرسانی شوند و خروجی‌های متفاوتی تولید کنند.</p>
                    <p>در صورت تغییر شرایط بدنی یا بیماری، استفاده از رژیم قبلی توصیه نمی‌شود.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۵. پرداخت، انصراف و بازگشت وجه</h3>
                    <p>پرداخت هزینه به‌منزله درخواست قطعی تولید رژیم تلقی می‌شود.</p>
                    <p>چنانچه رژیم هنوز تولید نشده باشد، کاربر مطابق ماده ۳۷ قانون تجارت الکترونیکی، تا ۷ روز پس از پرداخت امکان انصراف دارد.</p>
                    <p>برای اعمال انصراف، کاربر باید از طریق پنل کاربری اقدام کند.</p>
                    <p>در صورت شروع تولید رژیم (حتی در کمتر از ۷ روز)، حق انصراف از بین می‌رود.</p>
                    <p>وجه در صورت انصراف، ظرف حداکثر ۷۲ ساعت کاری به حساب اولیه بازگردانده می‌شود.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۶. مالکیت فکری</h3>
                    <p>تمامی الگوریتم‌ها، محتواها، فایل‌های رژیم و ساختارهای سامانه متعلق به Aidastyar است.</p>
                    <p>بازنشر، فروش، یا استفاده تجاری از محتوای دریافتی بدون مجوز کتبی ممنوع می‌باشد.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۷. اطلاعات شخصی و محرمانگی</h3>
                    <p>اطلاعات کاربران با روش‌های رمزنگاری ذخیره شده و تنها برای تیم فنی مجاز قابل‌دسترسی است.</p>
                    <p>در موارد زیر اطلاعات کاربر ممکن است افشا شود:</p>
                    <ul>
                        <li>با حکم یا دستور مقام قضایی</li>
                        <li>در موارد بررسی تخلف یا حملات امنیتی</li>
                        <li>در صورت انتقال مالکیت سامانه</li>
                    </ul>
                </div>
    
                <div class="terms-section">
                    <h3>۸. محدودیت استفاده و تخلفات</h3>
                    <p>استفاده فقط برای اهداف قانونی مجاز است.</p>
                    <p>ورود اطلاعات جعلی، استفاده برای آسیب جسمی/روانی یا انتشار محتوای دریافتی ممنوع است.</p>
                    <p>در صورت تخلف، حساب کاربر مسدود شده و امکان پیگرد قانونی وجود دارد.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۹. پشتیبانی و ارتباط رسمی</h3>
                    <p>ارتباط رسمی فقط از طریق پنل کاربری یا ایمیل رسمی سامانه معتبر است.</p>
                    <p>زمان پاسخ‌گویی: روزهای کاری، ساعت ۹ تا ۱۷</p>
                    <p>ارتباط از طریق سایر کانال‌ها (شبکه‌های اجتماعی، تلفن شخصی و...) مورد قبول نیست.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۱۰. شرایط خارج از کنترل (فورس‌ماژور)</h3>
                    <p>Aidastyar در برابر اختلالاتی از قبیل قطعی اینترنت، حملات سایبری، بلایای طبیعی یا دستورات قانونی غیرمترقبه مسئولیتی ندارد.</p>
                    <p>خدمات پس از رفع مشکل از سر گرفته خواهد شد.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۱۱. تحریم‌ها و محدودیت‌های ملی</h3>
                    <p>کاربر تأیید می‌کند در لیست تحریم‌های جمهوری اسلامی ایران قرار ندارد.</p>
                    <p>استفاده از خدمات برای اهداف غیرقانونی داخلی یا خارجی ممنوع است.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۱۲. قانون حاکم و مرجع رسیدگی</h3>
                    <p>این توافق‌نامه مشمول قوانین جمهوری اسلامی ایران است.</p>
                    <p>در صورت بروز اختلاف، ابتدا از طریق مذاکره حل‌وفصل خواهد شد.</p>
                    <p>در صورت عدم توافق، مرجع رسمی رسیدگی دادگاه عمومی حقوقی تهران - مجتمع قضایی شهید صدر خواهد بود.</p>
                </div>
    
                <div class="terms-section">
                    <h3>۱۳. تغییرات در توافق‌نامه</h3>
                    <p>Aidastyar مجاز است هر زمان متن توافق‌نامه را تغییر دهد.</p>
                    <p>ادامه استفاده از خدمات به منزله پذیرش نسخه جدید است.</p>
                    <p>نسخه به‌روز توافق‌نامه در همین صفحه قابل‌مشاهده خواهد بود.</p>
                </div>
    
                <!-- چک‌باکس تأیید در انتهای متن -->
                <div id="terms-agreement-checkbox" class="checkbox-container">
                    <input type="checkbox" id="agree-terms" class="real-checkbox">
                    <label for="agree-terms" class="checkbox-label">
                        <span class="check-icon"></span>
                        <span class="label-text">تمام شرایط و قوانین را مطالعه کرده‌ام و می‌پذیرم</span>
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Step 17: Confirmation -->
    <div id="confirm-submit-step" class="step">
        <h2>خلاصه اطلاعات شما</h2>
        <div id="summary-container"></div>
        <div id="confirmation-checkbox" class="checkbox-container">
            <input type="checkbox" id="confirm-info" class="real-checkbox">
            <label for="confirm-info" class="checkbox-label">
                <span class="check-icon"></span>
                <span class="label-text">اطلاعات وارد شده را تأیید می‌کنم</span>
            </label>
        </div>
        <div id="submit-button-container">
            <?php if (is_user_logged_in()): ?>
                <button type="submit" id="SubmitBtn" class="submit-form">ثبت نهایی</button>
            <?php else: ?>
                <button type="button" id="SubmitBtn" class="submit-form" onclick="saveFormAndLogin()">ورود و ثبت نهایی</button>
            <?php endif; ?>                
        </div>

        <div id="ai-diet-result" style="display:none;">
            <div class="ai-response-content"></div>
            <button id="downloadPdf" style="display:none">دانلود PDF</button>
        </div>
    </div>
    
    <div id="next-button-container">
        <button type="button" class="next-step">گام بعد</button>
    </div>
        
    <script>
    // اضافه کردن مدیریت تم به آبجکت state
    window.state = {
        ...window.state,
        toggleTheme: function() {
            document.body.classList.toggle('dark-mode');
            const isDark = document.body.classList.contains('dark-mode');
            localStorage.setItem('diet-theme', isDark ? 'dark' : 'light');
        }
    };
    
    // بارگذاری تم ذخیره شده
    document.addEventListener('DOMContentLoaded', function() {
        const savedTheme = localStorage.getItem('diet-theme') || 'light';
        if (savedTheme === 'dark') {
            document.body.classList.add('dark-mode');
        }
        
        // ایجاد دکمه تغییر تم
        const themeToggle = document.createElement('button');
        themeToggle.className = 'theme-toggle';
        themeToggle.title = 'تغییر تم تاریک/روشن';
        
        themeToggle.addEventListener('click', state.toggleTheme);
        document.body.appendChild(themeToggle);
    });
    </script>  
</form>

<script src="<?php echo $theme_assets; ?>/assets/js/services/diet/chart.js"></script>
<script src="<?php echo $theme_assets; ?>/assets/js/services/diet/script.js"></script>
<script src="<?php echo $theme_assets; ?>/assets/js/services/diet/form-events.js"></script>
<script src="<?php echo $theme_assets; ?>/assets/js/services/diet/form-validation.js"></script>
<script src="<?php echo $theme_assets; ?>/assets/js/services/diet/form-steps.js"></script>
<script src="<?php echo $theme_assets; ?>/assets/js/services/diet/form-inputs.js"></script>
    
 
<script>
window.APP_MODE = 2;
if (window.APP_MODE === 1) {
    const devTools = document.createElement('div');
    devTools.id = 'dev-tools';
    
    devTools.innerHTML = `
        <div class="dev-tools-header">
            <span>مراحل</span>
            <span class="toggle-visibility">×</span>
        </div>
        <div class="dev-tools-buttons">
            ${[...Array(17)].map((_, i) => 
                `<button onclick="navigateToStep(${i+1})" 
                  data-step="${i+1}">${i+1}</button>`
            ).join('')}
        </div>
    `;
    
    document.body.appendChild(devTools);
    
    // بروزرسانی مرحله فعلی
    const updateCurrentStep = () => {
        document.querySelectorAll('#dev-tools button').forEach(btn => {
            btn.classList.toggle('current-step', 
                parseInt(btn.dataset.step) === state.currentStep
            );
        });
    };
    
    // مشاهده تغییرات state
    window.addEventListener('stateUpdated', updateCurrentStep);
    updateCurrentStep();
    
    // کنترل نمایش/مخفی کردن
    const toggleBtn = devTools.querySelector('.toggle-visibility');
    let isVisible = true;
    
    toggleBtn.addEventListener('click', () => {
        isVisible = !isVisible;
        devTools.style.opacity = isVisible ? '1' : '0.3';
        devTools.querySelector('.dev-tools-buttons').style.display = 
            isVisible ? 'flex' : 'none';
        toggleBtn.textContent = isVisible ? '×' : '+';
    });
}

function saveFormAndLogin() {
    // ذخیره تمام داده‌های فرم
    localStorage.setItem('diet_form_data', JSON.stringify(window.state.formData));
    // ذخیره مرحله فعلی
    localStorage.setItem('diet_form_current_step', window.state.currentStep);
    // هدایت به صفحه لاگین
    window.location.href = '<?php echo wp_login_url(esc_url($_SERVER['REQUEST_URI'])); ?>';
}
</script>
-----------------------------------------------------------------------------------------------------
// /home/aidastya/public_html/wp-content/themes/ai-assistant/assets/js/services/diet/form-events.js
function setupScrollIndicator(containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    // ایجاد نشانگر اسکرول
    const scrollIndicator = document.createElement('div');
    scrollIndicator.className = 'scroll-indicator';
    scrollIndicator.innerHTML = '<div class="scroll-indicator-arrow"></div>';
    container.appendChild(scrollIndicator);

    // بررسی اولیه وضعیت اسکرول
    function checkScrollState() {
        const hasScroll = container.scrollHeight > container.clientHeight;
        const isAtBottom = container.scrollTop + container.clientHeight >= container.scrollHeight - 10;
        
        scrollIndicator.style.display = hasScroll ? 'flex' : 'none';
        
        if (hasScroll && !isAtBottom) {
            scrollIndicator.classList.remove('hidden');
            container.classList.remove('scrolled');
        } else {
            scrollIndicator.classList.add('hidden');
            container.classList.add('scrolled');
        }
    }

    // عملکرد کلیک برای اسکرول
    scrollIndicator.addEventListener('click', () => {
        container.scrollTo({
            top: container.scrollHeight,
            behavior: 'smooth'
        });
    });

    // رویداد اسکرول با debounce
    let scrollTimeout;
    container.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(checkScrollState, 50);
    });

    // بررسی تغییر اندازه
    const resizeObserver = new ResizeObserver(checkScrollState);
    resizeObserver.observe(container);

    // بررسی اولیه
    checkScrollState();
}

// استفاده از تابع برای تمام کانتینرهای اسکرول
document.addEventListener('DOMContentLoaded', () => {
    setupScrollIndicator('surgery-selection');
    setupScrollIndicator('stomach-selection');
    setupScrollIndicator('hormonal-selection');
    setupScrollIndicator('additional-info-selection');
    setupScrollIndicator('food-restriction-selection');
    setupScrollIndicator('goal-selection');
    setupScrollIndicator('activity-selection');
    setupScrollIndicator('meal-selection');
});

window.handleNextStep = function() {
    if (window.state.currentStep < window.totalSteps) {
        window.navigateToStep(window.state.currentStep + 1);
    }
};

window.preloadImages = function() {
    const images = [
        'assets/images/webp/img_0_de-min.webp',
        'assets/images/png/img_1_de-min.png',
        'assets/images/webp/img_0-min.webp',
        'assets/images/png/img_1-min.png'
    ];
    
    images.forEach(src => {
        const img = new Image();
        img.src = src;
    });
}

window.setupTermsAgreement = function(currentStep) {
    if (currentStep !== STEPS.TERMS_AGREEMENT) return;

    const nextButton = document.querySelector(".next-step");
    const agreeCheckbox = document.getElementById("agree-terms");
    
    // Reset state
    agreeCheckbox.checked = false;
    nextButton.disabled = true;

    agreeCheckbox.addEventListener("change", function() {
        const label = this.nextElementSibling;
        
        if (this.checked) {
            label.classList.add("checked-animation");
            setTimeout(() => {
                label.classList.remove("checked-animation");
                label.classList.add("checked");
            }, 800);
        } else {
            label.classList.remove("checked");
        }
        
        nextButton.disabled = !this.checked;
    });
}

window.setupWaterIntakeSelection = function(currentStep) {
    if (currentStep !== STEPS.WATER_INTAKE) return;

    const waterCups = document.querySelectorAll('.water-cup');
    const waterAmountDisplay = document.getElementById('water-amount');
    const waterLiterDisplay = document.getElementById('water-liter');
    const waterAmountText = document.getElementById('water-amount-text');
    const dontKnowCheckbox = document.getElementById('water-dont-know');
    const dontKnowText = document.getElementById('water-dont-know-text');
    const nextButton = document.querySelector('.next-step');
    
    nextButton.disabled = true;

    const updateNextButtonState = () => {
        const hasSelection = document.querySelector('.water-cup.selected') !== null;
        const isDontKnowChecked = dontKnowCheckbox.checked;
        nextButton.disabled = !(hasSelection || isDontKnowChecked);
    };

    const updateWaterDisplay = (amount, isDontKnow = false) => {
        if (isDontKnow) {
            waterAmountText.style.display = 'none';
            dontKnowText.style.display = 'block';
            state.updateFormData('waterIntake', null);
        } else {
            waterAmountDisplay.textContent = amount;
            waterLiterDisplay.textContent = (amount * 0.25).toFixed(1); // محاسبه لیتر (هر لیوان 250 سی‌سی)
            waterAmountText.style.display = 'flex';
            dontKnowText.style.display = 'none';
            state.updateFormData('waterIntake', amount);
        }
        updateNextButtonState();
    };

    waterCups.forEach((cup, index) => {
        cup.addEventListener('click', function() {
            dontKnowCheckbox.checked = false;
            document.querySelector('.stand-alone-none .checkbox-label').classList.remove('checked');
            
            const amount = parseInt(this.dataset.amount);
            
            // Reset all cups
            waterCups.forEach(c => {
                c.classList.remove('selected');
                c.querySelector('.water-wave')?.remove();
            });
            
            // Select cups up to clicked amount
            for (let i = 0; i < amount; i++) {
                waterCups[i].classList.add('selected');
            }
            
            updateWaterDisplay(amount);
        });
    });

    dontKnowCheckbox.addEventListener('change', function() {
        const label = this.nextElementSibling;
        if (this.checked) {
            label.classList.add('checked-animation');
            setTimeout(() => {
                label.classList.remove('checked-animation');
                label.classList.add('checked');
            }, 800);
            
            // Reset all cups
            waterCups.forEach(c => {
                c.classList.remove('selected');
                c.querySelector('.water-wave')?.remove();
            });
            
            updateWaterDisplay(0, true);
        } else {
            label.classList.remove('checked');
            updateWaterDisplay(0, false);
            updateNextButtonState();
        }
    });

    // بررسی اولیه وضعیت دکمه
    updateNextButtonState();
};

window.setupStomachDiscomfortSelection = function(currentStep) {
    try {
        if (currentStep !== STEPS.STOMACH) return;

        const elements = {
            noneCheckbox: document.getElementById('stomach-none'),
            bloating: document.getElementById('stomach-bloating'),
            pain: document.getElementById('stomach-pain'),
            heartburn: document.getElementById('stomach-heartburn'),
            nausea: document.getElementById('stomach-nausea'),
            indigestion: document.getElementById('stomach-indigestion'),
            constipation: document.getElementById('stomach-constipation'),
            diarrhea: document.getElementById('stomach-diarrhea'),
            foodIntolerance: document.getElementById('stomach-food-intolerance'),
            acidReflux: document.getElementById('stomach-acid-reflux'),
            slowDigestion: document.getElementById('stomach-slow-digestion'),
            fullness: document.getElementById('stomach-fullness'),            
            nextButton: document.querySelector('.next-step')
        };

        if (Object.values(elements).some(el => !el)) {
            console.error('Some required elements for stomach step are missing');
            return;
        }

        elements.nextButton.disabled = true;

        const validateForm = () => {
            const anyChecked = [
                elements.bloating, 
                elements.pain, 
                elements.heartburn, 
                elements.nausea,
                elements.indigestion,
                elements.constipation,
                elements.diarrhea,
                elements.foodIntolerance,
                elements.acidReflux,
                elements.slowDigestion,
                elements.fullness
            ].some(option => option.checked) || elements.noneCheckbox.checked;
            
            elements.nextButton.disabled = !anyChecked;
            
            const stomachInfo = [];
            if (elements.bloating.checked) stomachInfo.push('bloating');
            if (elements.pain.checked) stomachInfo.push('pain');
            if (elements.heartburn.checked) stomachInfo.push('heartburn');
            if (elements.nausea.checked) stomachInfo.push('nausea');
            if (elements.indigestion.checked) stomachInfo.push('indigestion');
            if (elements.constipation.checked) stomachInfo.push('constipation');
            if (elements.diarrhea.checked) stomachInfo.push('diarrhea');
            if (elements.foodIntolerance.checked) stomachInfo.push('food-intolerance');
            if (elements.noneCheckbox.checked) stomachInfo.push('none');
            if (elements.acidReflux.checked) stomachInfo.push('acid-reflux');
            if (elements.slowDigestion.checked) stomachInfo.push('slow-digestion');
            if (elements.fullness.checked) stomachInfo.push('fullness');            
            
            state.updateFormData('stomachDiscomfort', stomachInfo);
        };

        const handleCheckboxChange = (checkbox) => {
            checkbox.addEventListener('change', function() {
                const label = this.nextElementSibling;
                if (label) {
                    label.classList.add('checked-animation');
                    setTimeout(() => {
                        label.classList.remove('checked-animation');
                        label.classList.toggle('checked', this.checked);
                    }, 800);
                }
                validateForm();
            });
        };

        elements.noneCheckbox.addEventListener('change', function() {
            if (this.checked) {
                [
                    elements.bloating, 
                    elements.pain, 
                    elements.heartburn, 
                    elements.nausea,
                    elements.indigestion,
                    elements.constipation,
                    elements.diarrhea,
                    elements.foodIntolerance,
                    elements.acidReflux,
                    elements.slowDigestion,
                    elements.fullness
                ].forEach(option => {
                    option.checked = false;
                    const label = option.nextElementSibling;
                    if (label) label.classList.remove('checked');
                });
            }
            validateForm();
        });

        [
            elements.bloating, 
            elements.pain, 
            elements.heartburn, 
            elements.nausea,
            elements.indigestion,
            elements.constipation,
            elements.diarrhea,
            elements.foodIntolerance,
            elements.acidReflux,
            elements.slowDigestion,
            elements.fullness
        ].forEach(option => {
            handleCheckboxChange(option);
            option.addEventListener('change', function() {
                if (this.checked) {
                    elements.noneCheckbox.checked = false;
                    const label = elements.noneCheckbox.nextElementSibling;
                    if (label) label.classList.remove('checked');
                }
                validateForm();
            });
        });

        validateForm();
    } catch (error) {
        console.error('Error in stomach discomfort step:', error);
    }
};

window.setupHormonalSelection = function(currentStep) {
    try {
        if (currentStep !== STEPS.HORMONAL) return;

        const elements = {
            noneCheckbox: document.getElementById('hormonal-none'),
            hypothyroidism: document.getElementById('hormonal-hypothyroidism'),
            hyperthyroidism: document.getElementById('hormonal-hyperthyroidism'),
            diabetes: document.getElementById('hormonal-diabetes'),
            insulinResistance: document.getElementById('hormonal-insulin-resistance'),
            pcos: document.getElementById('hormonal-pcos'),
            menopause: document.getElementById('hormonal-menopause'),
            cortisol: document.getElementById('hormonal-cortisol'),
            growth: document.getElementById('hormonal-growth'),
            nextButton: document.querySelector('.next-step')
        };

        if (Object.values(elements).some(el => !el)) {
            console.error('Some required elements for hormonal step are missing');
            return;
        }

        elements.nextButton.disabled = true;

        const validateForm = () => {
            const anyChecked = [
                elements.hypothyroidism,
                elements.hyperthyroidism,
                elements.diabetes,
                elements.insulinResistance,
                elements.pcos,
                elements.menopause,
                elements.cortisol,
                elements.growth
            ].some(option => option.checked) || elements.noneCheckbox.checked;
            
            elements.nextButton.disabled = !anyChecked;
            
            const hormonalInfo = [];
            if (elements.hypothyroidism.checked) hormonalInfo.push('hypothyroidism');
            if (elements.hyperthyroidism.checked) hormonalInfo.push('hyperthyroidism');
            if (elements.diabetes.checked) hormonalInfo.push('diabetes');
            if (elements.insulinResistance.checked) hormonalInfo.push('insulin-resistance');
            if (elements.pcos.checked) hormonalInfo.push('pcos');
            if (elements.menopause.checked) hormonalInfo.push('menopause');
            if (elements.cortisol.checked) hormonalInfo.push('cortisol');
            if (elements.growth.checked) hormonalInfo.push('growth');
            if (elements.noneCheckbox.checked) hormonalInfo.push('none');
            
            state.updateFormData('hormonal', hormonalInfo);
        };

        const handleCheckboxChange = (checkbox) => {
            checkbox.addEventListener('change', function() {
                const label = this.nextElementSibling;
                if (label) {
                    label.classList.add('checked-animation');
                    setTimeout(() => {
                        label.classList.remove('checked-animation');
                        label.classList.toggle('checked', this.checked);
                    }, 800);
                }
                validateForm();
            });
        };

        elements.noneCheckbox.addEventListener('change', function() {
            if (this.checked) {
                [
                    elements.hypothyroidism,
                    elements.hyperthyroidism,
                    elements.diabetes,
                    elements.insulinResistance,
                    elements.pcos,
                    elements.menopause,
                    elements.cortisol,
                    elements.growth
                ].forEach(option => {
                    option.checked = false;
                    const label = option.nextElementSibling;
                    if (label) label.classList.remove('checked');
                });
            }
            validateForm();
        });

        [
            elements.hypothyroidism,
            elements.hyperthyroidism,
            elements.diabetes,
            elements.insulinResistance,
            elements.pcos,
            elements.menopause,
            elements.cortisol,
            elements.growth
        ].forEach(option => {
            handleCheckboxChange(option);
            option.addEventListener('change', function() {
                if (this.checked) {
                    elements.noneCheckbox.checked = false;
                    const label = elements.noneCheckbox.nextElementSibling;
                    if (label) label.classList.remove('checked');
                }
                validateForm();
            });
        });

        validateForm();
    } catch (error) {
        console.error('Error in hormonal selection step:', error);
    }
};

window.setupSurgerySelection = function(currentStep) {
    try {
        if (currentStep !== STEPS.SURGERY) return;

        const elements = {
            noneCheckbox: document.getElementById('surgery-none'),
            metabolic: document.getElementById('surgery-metabolic'),
            gallbladder: document.getElementById('surgery-gallbladder'),
            intestine: document.getElementById('surgery-intestine'),
            thyroid: document.getElementById('surgery-thyroid'),
            pancreas: document.getElementById('surgery-pancreas'),
            gynecology: document.getElementById('surgery-gynecology'),
            kidney: document.getElementById('surgery-kidney'),
            liver: document.getElementById('surgery-liver'),
            heart: document.getElementById('surgery-heart'),
            nextButton: document.querySelector('.next-step')
        };

        if (Object.values(elements).some(el => !el)) {
            console.error('Some required elements for surgery step are missing');
            return;
        }

        document.body.setAttribute('data-gender', state.formData.gender);

        const femaleOnlyOptions = document.querySelectorAll('.female-only');
        if (state.formData.gender === 'female') {
            femaleOnlyOptions.forEach(option => option.style.display = 'block');
        } else {
            femaleOnlyOptions.forEach(option => {
                option.style.display = 'none';
                const checkbox = option.querySelector('.real-checkbox');
                if (checkbox) checkbox.checked = false;
            });
        }

        elements.nextButton.disabled = true;

        const validateForm = () => {
            const anyChecked = [
                elements.metabolic,
                elements.gallbladder,
                elements.intestine,
                elements.thyroid,
                elements.pancreas,
                elements.gynecology,
                elements.kidney,
                elements.liver,
                elements.heart
            ].some(option => option.checked) || elements.noneCheckbox.checked;
            
            elements.nextButton.disabled = !anyChecked;
            
            const surgeryInfo = [];
            if (elements.metabolic.checked) surgeryInfo.push('metabolic');
            if (elements.gallbladder.checked) surgeryInfo.push('gallbladder');
            if (elements.intestine.checked) surgeryInfo.push('intestine');
            if (elements.thyroid.checked) surgeryInfo.push('thyroid');
            if (elements.pancreas.checked) surgeryInfo.push('pancreas');
            if (elements.gynecology.checked) surgeryInfo.push('gynecology');
            if (elements.kidney.checked) surgeryInfo.push('kidney');
            if (elements.liver.checked) surgeryInfo.push('liver');
            if (elements.heart.checked) surgeryInfo.push('heart');
            if (elements.noneCheckbox.checked) surgeryInfo.push('none');
            
            state.updateFormData('surgery', surgeryInfo);
        };

        const handleCheckboxChange = (checkbox) => {
            checkbox.addEventListener('change', function() {
                const label = this.nextElementSibling;
                if (label) {
                    label.classList.add('checked-animation');
                    setTimeout(() => {
                        label.classList.remove('checked-animation');
                        label.classList.toggle('checked', this.checked);
                    }, 800);
                }
                validateForm();
            });
        };

        elements.noneCheckbox.addEventListener('change', function() {
            if (this.checked) {
                [
                    elements.metabolic,
                    elements.gallbladder,
                    elements.intestine,
                    elements.thyroid,
                    elements.pancreas,
                    elements.gynecology,
                    elements.kidney,
                    elements.liver,
                    elements.heart
                ].forEach(option => {
                    option.checked = false;
                    const label = option.nextElementSibling;
                    if (label) label.classList.remove('checked');
                });
            }
            validateForm();
        });

        [
            elements.metabolic,
            elements.gallbladder,
            elements.intestine,
            elements.thyroid,
            elements.pancreas,
            elements.gynecology,
            elements.kidney,
            elements.liver,
            elements.heart
        ].forEach(option => {
            handleCheckboxChange(option);
            option.addEventListener('change', function() {
                if (this.checked) {
                    elements.noneCheckbox.checked = false;
                    const label = elements.noneCheckbox.nextElementSibling;
                    if (label) label.classList.remove('checked');
                }
                validateForm();
            });
        });

        validateForm();
    } catch (error) {
        console.error('Error in surgery selection step:', error);
    }
};

window.setupAdditionalInfoSelection = function(currentStep) {
    const checkboxes = document.querySelectorAll('#additional-info-selection .real-checkbox');
    const nextButton = document.querySelector('.next-step');
    const noneCheckbox = document.getElementById('info-none');
    
    if (currentStep !== STEPS.ADDITIONAL_INFO) return;

    nextButton.disabled = true;

    const validateForm = () => {
        const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
        nextButton.disabled = !anyChecked;
        
        const additionalInfo = [];
        if (document.getElementById('info-diabetes').checked) additionalInfo.push('diabetes');
        if (document.getElementById('info-pressure').checked) additionalInfo.push('pressure');
        if (document.getElementById('info-thyroid').checked) additionalInfo.push('thyroid');
        if (document.getElementById('info-allergy').checked) additionalInfo.push('allergy');
        if (document.getElementById('info-none').checked) additionalInfo.push('none');
        
        state.updateFormData('additionalInfo', additionalInfo);
    };

    checkboxes.forEach(checkbox => {
        const handleCheckboxChange = function() {
            if (this === noneCheckbox && this.checked) {
                checkboxes.forEach(cb => {
                    if (cb !== noneCheckbox) {
                        cb.checked = false;
                        cb.nextElementSibling.classList.remove('checked');
                    }
                });
            } else if (this.checked) {
                noneCheckbox.checked = false;
                noneCheckbox.nextElementSibling.classList.remove('checked');
            }
            
            const label = this.nextElementSibling;
            label.classList.add('checked-animation');
            
            setTimeout(() => {
                label.classList.remove('checked-animation');
                if (this.checked) {
                    label.classList.add('checked');
                } else {
                    label.classList.remove('checked');
                }
            }, 800);
            
            validateForm();
        };
        
        checkbox.addEventListener('change', handleCheckboxChange);
    });

    validateForm();
}

window.setupFoodRestrictionSelection = function(currentStep) {
    const checkboxes = document.querySelectorAll('#food-restriction-selection .real-checkbox');
    const nextButton = document.querySelector('.next-step');
    const noneCheckbox = document.getElementById('restriction-none');
    
    if (currentStep !== STEPS.FOOD_RESTRICTIONS) return;

    nextButton.disabled = true;

    const validateForm = () => {
        const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
        nextButton.disabled = !anyChecked;
        
        const foodRestrictions = [];
        if (document.getElementById('restriction-vegetarian').checked) foodRestrictions.push('vegetarian');
        if (document.getElementById('restriction-no-seafood').checked) foodRestrictions.push('no-seafood');
        if (noneCheckbox.checked) foodRestrictions.push('none');
        
        state.updateFormData('foodRestrictions', foodRestrictions);
    };

    checkboxes.forEach(checkbox => {
        const handleCheckboxChange = function() {
            if (this === noneCheckbox && this.checked) {
                checkboxes.forEach(cb => {
                    if (cb !== noneCheckbox) {
                        cb.checked = false;
                        cb.nextElementSibling.classList.remove('checked');
                    }
                });
            } else if (this.checked) {
                noneCheckbox.checked = false;
                noneCheckbox.nextElementSibling.classList.remove('checked');
            }
            
            const label = this.nextElementSibling;
            label.classList.add('checked-animation');
            
            setTimeout(() => {
                label.classList.remove('checked-animation');
                if (this.checked) {
                    label.classList.add('checked');
                } else {
                    label.classList.remove('checked');
                }
            }, 800);
            
            validateForm();
        };
        
        checkbox.addEventListener('change', handleCheckboxChange);
    });

    validateForm();
}

window.setupConfirmationCheckbox = function(currentStep) {
    const submitButton = document.querySelector(".submit-form");
    const confirmCheckbox = document.getElementById("confirm-info");
    
    if (currentStep !== STEPS.CONFIRMATION) return;

    submitButton.disabled = !confirmCheckbox.checked;
    if (confirmCheckbox.checked) {
        confirmCheckbox.nextElementSibling.classList.add("checked");
    }

    const validateForm = () => {
        submitButton.disabled = !confirmCheckbox.checked;
    };

    confirmCheckbox.addEventListener("change", function() {
        const label = this.nextElementSibling;
        
        if (this.checked) {
            label.classList.add("checked-animation");
            setTimeout(() => {
                label.classList.remove("checked-animation");
                label.classList.add("checked");
            }, 800);
        } else {
            label.classList.remove("checked");
        }
        
        validateForm();
    });

    validateForm();
}

window.handleFormSubmit = function(event) {
    event.preventDefault();
    
    // 1. جمع‌آوری ساختارمند تمام داده‌ها
    const formData = {
        ...state.formData,
        // اطلاعات پایه
        gender: state.formData.gender,
        age: state.formData.age,
        height: state.formData.height,
        weight: state.formData.weight,
        targetWeight: state.formData.targetWeight,
        goal: state.formData.goal,
        activity: state.formData.activity,
        meals: state.formData.meals,
        waterIntake: state.formData.waterIntake,
        // اطلاعات پزشکی
        surgery: state.formData.surgery || [],
        hormonal: state.formData.hormonal || [],
        stomachDiscomfort: state.formData.stomachDiscomfort || [],
        
        // اطلاعات تکمیلی (به صورت جداگانه)
        diabetes: state.formData.additionalInfo?.includes('diabetes') || false,
        pressure: state.formData.additionalInfo?.includes('pressure') || false,
        thyroid: state.formData.additionalInfo?.includes('thyroid') || false,
        allergy: state.formData.additionalInfo?.includes('allergy') || false,
        vegetarian: state.formData.foodRestrictions?.includes('vegetarian') || false,
        noSeafood: state.formData.foodRestrictions?.includes('no-seafood') || false,
    };

    console.log('Form submitted:', formData);
    
    document.getElementById('SubmitBtn').innerHTML = 'در حال ارسال درخواست ...';
    document.getElementById('SubmitBtn').disabled = true;
    // ایجاد و ارسال یک رویداد سفارشی
    const formSubmittedEvent = new CustomEvent('formSubmitted', {
        detail: { formData }
    });
    window.dispatchEvent(formSubmittedEvent);      
};

window.showSummary = function() {
    const summaryContainer = document.getElementById('summary-container');
    const nextButton = document.querySelector('.next-step');
    const confirmCheckbox = document.getElementById('confirm-info');
    
    nextButton.disabled = true;
    
    confirmCheckbox.addEventListener('change', function() {
        nextButton.disabled = !this.checked;
    });

    const { 
        gender, age, height, weight, targetWeight, goal, 
        activity, meals, additionalInfo = [], 
        foodRestrictions = [], surgery = [], hormonal = [],
        stomachDiscomfort = [],
        waterIntake
    } = state.formData;
    const goalText = { 
        "weight-loss": "کاهش وزن", 
        "weight-gain": "افزایش وزن", 
        "fitness": "حفظ سلامت"
    }[goal];
    const activityText = { "very-low": "خیلی کم (کمتر از 1 ساعت)", "low": "کم (1 تا 2 ساعت)", "medium": "متوسط (2 تا 4 ساعت)", "high": "زیاد (بیشتر از 4 ساعت)" }[activity];
        const mealsText = { 
        "2": "۲ وعده", 
        "3": "۳ وعده", 
        "4": "۴ وعده", 
        "more": "بیشتر",
        "irregular": "وعده‌های نامنظم" 
    }[meals];
    
    const waterText = waterIntake === null ? 
        'مشخص نیست' : 
        `${waterIntake} لیوان (≈${(waterIntake * 0.25).toFixed(1)} لیتر)`;;
    
    const hormonalText = [];
    if (hormonal.includes('pcos')) hormonalText.push('سندرم تخمدان پلی کیستیک');
    if (hormonal.includes('hypothyroidism')) hormonalText.push('کم کاری تیروئید');
    if (hormonal.includes('hyperthyroidism')) hormonalText.push('پرکاری تیروئید');
    if (hormonal.includes('diabetes')) hormonalText.push('دیابت');
    // اضافه کردن ترجمه فارسی گزینه‌های جدید:
    if (hormonal.includes('insulin-resistance')) hormonalText.push('مقاومت به انسولین');
    if (hormonal.includes('menopause')) hormonalText.push('یائسگی/پیش یائسگی');
    if (hormonal.includes('cortisol')) hormonalText.push('مشکلات کورتیزول');
    if (hormonal.includes('growth')) hormonalText.push('اختلال هورمون رشد');
    if (hormonal.includes('none')) hormonalText.push('هیچکدام');
    
    const additionalInfoText = additionalInfo.map(item => {
        switch(item) {
            case 'diabetes': return 'دیابت';
            case 'pressure': return 'فشار خون';
            case 'thyroid': return 'مشکلات تیروئید';
            case 'allergy': return 'حساسیت غذایی';
            case 'none': return 'هیچکدام';
            default: return item;
        }
    });
    
    const foodRestrictionsText = foodRestrictions.map(item => {
        switch(item) {
            case 'vegetarian': return 'گیاهخواری';
            case 'no-seafood': return 'عدم مصرف غذای دریایی';
            case 'none': return 'بدون محدودیت';
            default: return item;
        }
    });
    
    const stomachDiscomfortText = stomachDiscomfort.map(item => {
        switch(item) {
            case 'bloating': return 'نفخ یا گاز معده';
            case 'pain': return 'درد یا گرفتگی معده';
            case 'heartburn': return 'سوزش سر دل';
            case 'nausea': return 'حالت تهوع';
            case 'indigestion': return 'سوء هاضمه مزمن';
            case 'none': return 'هیچکدام';
            default: return item;
        }
    });
    
    const surgeryText = [];
    if (surgery.includes('kidney')) surgeryText.push('پیوند کلیه');
    if (surgery.includes('heart')) surgeryText.push('پیوند قلب');
    if (surgery.includes('liver')) surgeryText.push('پیوند کبد');
    if (surgery.includes('metabolic')) surgeryText.push('جراحی متابولیک');
    if (surgery.includes('intestine')) surgeryText.push('جراحی روده');
    if (surgery.includes('thyroid')) surgeryText.push('جراحی تیروئید');
    if (surgery.includes('gallbladder')) surgeryText.push('جراحی کیسه صفرا');
    if (surgery.includes('pancreas')) surgeryText.push('جراحی لوزالمعده');
    if (surgery.includes('gynecology')) surgeryText.push('جراحی‌های زنان');
    if (surgery.includes('none')) surgeryText.push('هیچکدام');
    
    summaryContainer.innerHTML = `
        <div class="summary-item">
            <span class="summary-label">جنسیت:</span>
            <span class="summary-value">${gender === "male" ? "مرد" : "زن"}</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">سن:</span>
            <span class="summary-value">${age} سال</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">قد:</span>
            <span class="summary-value">${height} سانتی‌متر</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">وزن فعلی:</span>
            <span class="summary-value">${weight} کیلوگرم</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">وزن هدف:</span>
            <span class="summary-value">${targetWeight || 'ثبت نشده'} کیلوگرم</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">هدف:</span>
            <span class="summary-value">${goalText}</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">سابقه جراحی:</span>
            <span class="summary-value">${surgeryText.join('، ') || 'ثبت نشده'}</span>
        </div>  
        <div class="summary-item">
            <span class="summary-label">اختلالات هورمونی:</span>
            <span class="summary-value">${hormonalText.join('، ') || 'ثبت نشده'}</span>
        </div>    
        <div class="summary-item">
            <span class="summary-label">علائم معده:</span>
            <span class="summary-value">${stomachDiscomfortText.join('، ') || 'ثبت نشده'}</span>
        </div>    
        <div class="summary-item">
            <span class="summary-label">مصرف آب روزانه:</span>
            <span class="summary-value">${waterText}</span>
        </div>        
        <div class="summary-item">
            <span class="summary-label">فعالیت روزانه:</span>
            <span class="summary-value">${activityText}</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">تعداد وعده‌های غذایی:</span>
            <span class="summary-value">${mealsText}</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">اطلاعات تکمیلی:</span>
            <span class="summary-value">${additionalInfoText.join('، ') || 'ثبت نشده'}</span>
        </div>
        <div class="summary-item">
            <span class="summary-label">محدودیت‌های غذایی:</span>
            <span class="summary-value">${foodRestrictionsText.join('، ') || 'ثبت نشده'}</span>
        </div>
    `;
}

// Initialize event listeners
window.addEventListener('load', preloadImages);

document.addEventListener("DOMContentLoaded", () => {
    const confirmCheckbox = document.getElementById("confirm-terms");
    const genderOptions = document.querySelectorAll(".gender-option");
    
    const updateGenderOptionsState = () => {
        genderOptions.forEach(option => {
            if (confirmCheckbox.checked) {
                option.style.opacity = "1";
                option.style.pointerEvents = "auto";
                option.style.filter = "none";
            } else {
                option.style.opacity = "0.5";
                option.style.pointerEvents = "none";
                option.style.filter = "grayscale(80%)";
            }
        });
    };
    
    confirmCheckbox.addEventListener("change", updateGenderOptionsState);
    updateGenderOptionsState();
    
    navigateToStep(state.currentStep);
    document.querySelector(".next-step").addEventListener("click", handleNextStep);
    document.getElementById("back-button").addEventListener("click", handleBackStep);
    document.getElementById("multi-step-form").addEventListener("submit", handleFormSubmit);
    window.addEventListener("popstate", (event) => {
        if (event.state?.step) state.updateStep(event.state.step);
        else navigateToStep(1);
    });

    setupInput("age-input", "age-display", "age");
    setupInput("height-input", "height-display", "height");
    setupInput("weight-input", "weight-display", "weight");
    setupInput("target-weight-input", "target-weight-display", "targetWeight");

    setupOptionSelection(".gender-option", "gender");
    setupOptionSelection(".goal-option", "goal");
    setupOptionSelection(".activity-option", "activity");
    setupOptionSelection(".meal-option", "meals");

    document.addEventListener("keydown", handleEnterKey);
});
-----------------------------------------------------------------------------------------------------
// /home/aidastya/public_html/wp-content/themes/ai-assistant/assets/js/services/diet/form-inputs.js
window.setupInput = function(inputId, displayId, field) {
    const input = document.getElementById(inputId);
    const display = document.getElementById(displayId);
    const nextButton = document.querySelector(".next-step");

    if (nextButton) nextButton.disabled = true;

    const updateDisplay = (value) => {
        display.textContent = value ? 
            `${value} ${field === "age" ? "سال" : field === "height" ? "سانتی‌متر" : "کیلوگرم"}` : 
            `0 ${field === "age" ? "سال" : field === "height" ? "سانتی‌متر" : "کیلوگرم"}`;
        
        // تغییر این خط برای استفاده از متغیرهای CSS
        display.style.color = value ? "var(--text-color)" : "var(--light-text-color)";
        
        state.updateFormData(field, value ? parseInt(value) : null);
        
        if (field === "weight" && state.formData.height && value) {
            calculateBMI(state.formData.height, parseInt(value));
        }
    };

    input.addEventListener("input", () => {
        let value = input.value.replace(/\D/g, "");
        if (field === "age" && value.length > 2) value = value.slice(0, 2);
        else if ((field === "height" || field === "weight") && value.length > 3) value = value.slice(0, 3);
        
        input.value = value;
        updateDisplay(value);
        
        if (input.type === "text") {
            setTimeout(() => input.setSelectionRange(value.length, value.length), 0);
        }
        
        validateStep(state.currentStep);
    });

    input.addEventListener("click", () => {
        const value = input.value.replace(/\D/g, "");
        if (input.type === "text") input.setSelectionRange(value.length, value.length);
    });

    input.addEventListener("blur", () => {
        const value = input.value.trim();
        if (!value) updateDisplay("");
        validateStep(state.currentStep);
    });
}

window.setupOptionSelection = function(selector, key) {
    document.querySelectorAll(selector).forEach(el => {
        el.addEventListener("click", () => {
            const confirmCheckbox = document.getElementById("confirm-terms");
            if (!confirmCheckbox.checked) {
                alert("لطفاً ابتدا شرایط استفاده را تأیید کنید");
                return;
            }

            document.querySelectorAll(selector).forEach(opt => {
                opt.classList.remove("selected");
                opt.style.transform = "";
                opt.style.boxShadow = "";
            });
            
            el.classList.add("selected");
            el.classList.add("selected-with-effect");
            
            setTimeout(() => {
                el.classList.remove("selected-with-effect");
                state.updateFormData(key, el.dataset[key]);
                
                el.style.transform = "translateY(-3px)";
                el.style.boxShadow = "0 10px 20px rgba(0, 133, 122, 0.2)";
                
                setTimeout(() => {
                    navigateToStep(state.currentStep + 1);
                }, 250);
            }, 150);
        });
    });
}
-----------------------------------------------------------------------------------------------------
// /home/aidastya/public_html/wp-content/themes/ai-assistant/assets/js/services/diet/form-steps.js
window.showStep = function(step) {
    const stepElements = [
        "gender-selection-step",
        "goal-selection-step",
        "age-input-step", 
        "height-input-step",
        "weight-input-step",
        "target-weight-step",
        "goal-weight-display",
        "surgery-step",
        "hormonal-disorders-step",
        "stomach-discomfort-step",
        "water-intake-step",
        "activity-selection-step",
        "meal-selection-step",
        "additional-info-step",
        "food-restriction-step",
        "terms-agreement-step", // مرحله 16 جدید
        "confirm-submit-step" // مرحله 17 (همان 16 قبلی)
    ];
    
    document.querySelectorAll(".step").forEach(el => {
        el.classList.remove("active");
        if (el.id === "goal-weight-display") {
            el.style.display = 'none';
            if (!el.classList.contains("active")) {
                el.querySelector('.step7-image-container').innerHTML = '';
            }
        }
    });
    
    const currentStepElement = document.getElementById(stepElements[step - 1]);
    if (currentStepElement) {
        currentStepElement.classList.add("active");
        if (currentStepElement.id === "goal-weight-display") {
            currentStepElement.style.display = 'flex';
        }
    }

    if (step === STEPS.GOAL_DISPLAY) {
        const goalTitleElement = document.getElementById('goal-title-text');
        if (goalTitleElement) {
            const goalText = {
                "weight-loss": "هدف: کاهش وزن",
                "weight-gain": "هدف: افزایش وزن", 
                "fitness": "هدف: حفظ سلامت"
            }[state.formData.goal];
            
            goalTitleElement.textContent = goalText || "هدف: مشخص نشده";
        }
    
        const imageContainer = document.querySelector('#goal-weight-display .step7-image-container');
        let svgFile = '';
        
        if (state.formData.goal === 'weight-loss') {
            svgFile = '/wp-content/themes/ai-assistant/assets/images/svg/weight-loss.svg';
        } else if (state.formData.goal === 'weight-gain' || state.formData.goal === 'fitness') {
            svgFile = '/wp-content/themes/ai-assistant/assets/images/svg/weight-gain.svg';
        }
        
        imageContainer.innerHTML = `
            <div class="goal-title-container">
                <h2 class="goal-title" id="goal-title-text">
                    ${state.formData.goal === 'weight-loss' ? 'کاهش وزن' : 
                      state.formData.goal === 'weight-gain' ? 'افزایش وزن' : 
                      'حفظ سلامت'}
                </h2>
            </div>
            <object type="image/svg+xml" data="${svgFile}" class="goal-svg"></object>
            <div class="weight-display-container">
                <div class="weight-display-box target-weight">
                    <div class="weight-value">${state.formData.targetWeight || 0}</div>
                    <div class="weight-unit">کیلوگرم</div>
                    <div class="weight-label">وزن هدف</div>
                </div>
                <div class="weight-display-box current-weight">
                    <div class="weight-value">${state.formData.weight || 0}</div>
                    <div class="weight-unit">کیلوگرم</div>
                    <div class="weight-label">وزن فعلی</div>
                </div>
            </div>
        `;
    }
    
    const nextButtonContainer = document.getElementById("next-button-container");
    if (nextButtonContainer) {
        nextButtonContainer.style.display = [
            STEPS.GENDER, 
            STEPS.GOAL,
            STEPS.WATER_INTAKE, // اضافه شده
            STEPS.ACTIVITY, 
            STEPS.MEALS
        ].includes(step) ? "none" : "block";
    }

    if ([STEPS.AGE, STEPS.HEIGHT, STEPS.WEIGHT, STEPS.TARGET_WEIGHT, STEPS.WATER_INTAKE].includes(step)) {
        const inputId = `${["age", "height", "weight", "target-weight"][step - 3]}-input`;
        const inputElement = document.getElementById(inputId);
        if (inputElement) inputElement.focus();
        
        const nextButton = document.querySelector(".next-step");
        if (nextButton) nextButton.disabled = true;
        
        validateStep(step);
    }
    
    if (step === STEPS.WATER_INTAKE) {
        setupWaterIntakeSelection(step);
        document.getElementById("next-button-container").style.display = "block";
    } 
    else if (step === STEPS.STOMACH) {
        setupStomachDiscomfortSelection(step);
    } 
    else if (step === STEPS.HORMONAL) {
        setupHormonalSelection(step);
    } 
    else if (step === STEPS.SURGERY) {
        setupSurgerySelection(step);
    } 
    else if (step === STEPS.ADDITIONAL_INFO) {
        setupAdditionalInfoSelection(step);
    } 
    else if (step === STEPS.FOOD_RESTRICTIONS) {
        setupFoodRestrictionSelection(step);
    } 
    else if (step === STEPS.TERMS_AGREEMENT) {
        setupTermsAgreement(step);
        document.getElementById("next-button-container").style.display = "block";
    } 
    else if (step === STEPS.CONFIRMATION) {
        showSummary();
        setupConfirmationCheckbox(step);
        document.getElementById("next-button-container").style.display = "none";
        document.getElementById("submit-button-container").style.display = "block";
        
        const confirmCheckbox = document.getElementById("confirm-info");
        const submitButton = document.querySelector(".submit-form");
        if (submitButton) {
            submitButton.disabled = !confirmCheckbox.checked;
        }
    }
    
    if (window.APP_MODE === 1) {
        if ([
            STEPS.GENDER, STEPS.GOAL, STEPS.AGE, STEPS.HEIGHT, 
            STEPS.WEIGHT, STEPS.TARGET_WEIGHT, STEPS.WATER_INTAKE,
            STEPS.SURGERY, STEPS.HORMONAL, STEPS.STOMACH, STEPS.ACTIVITY, 
            STEPS.MEALS, STEPS.ADDITIONAL_INFO, STEPS.FOOD_RESTRICTIONS
        ].includes(step)) {
            state.fillTestData(step);
        }
    }
}

window.autoFillStepInputs = function(step) {
    const fillInput = (inputId, displayId, value, unit) => {
        const input = document.getElementById(inputId);
        const display = document.getElementById(displayId);
        if (input && display && !input.value) {
            input.value = value;
            display.textContent = `${value} ${unit}`;
            state.updateFormData(inputId.replace('-input',''), value);
        }
    };

    switch(step) {
        case STEPS.AGE:
            fillInput('age-input', 'age-display', 30, 'سال');
            break;
        case STEPS.HEIGHT:
            fillInput('height-input', 'height-display', 175, 'سانتی‌متر');
            break;
        case STEPS.WEIGHT:
            fillInput('weight-input', 'weight-display', 80, 'کیلوگرم');
            break;
        case STEPS.TARGET_WEIGHT:
            fillInput('target-weight-input', 'target-weight-display', 70, 'کیلوگرم');
            break;
    }
};

window.updateStepCounter = function(step) {
    document.getElementById("current-step").textContent = step;
    document.getElementById("total-steps").textContent = totalSteps;
}

window.updateProgressBar = function(step) {
    const progress = ((step - 1) / (totalSteps - 1)) * 100;
    document.getElementById("progress-bar").style.width = `${progress}%`;
}

window.navigateToStep = function(step) {
    if (step >= 1 && step <= totalSteps) {
        state.updateStep(step);
        history.pushState({ step: state.currentStep }, "", `#step-${state.currentStep}`);
    }
}

window.handleNextStep = function() {
    if (state.currentStep < totalSteps) navigateToStep(state.currentStep + 1);
}

window.handleBackStep = function() {
    if (state.currentStep > 1) navigateToStep(state.currentStep - 1);
}

window.handleEnterKey = function(event) {
    if (event.key === "Enter" && event.target.matches("input[type='text']")) {
        event.preventDefault();
        document.querySelector(".next-step").click();
    }
}
-----------------------------------------------------------------------------------------------------
// /home/aidastya/public_html/wp-content/themes/ai-assistant/assets/js/services/diet/form-validation.js
window.validateStep = function(step) {
    const nextButton = document.querySelector(".next-step");
    const errorMessages = {
        [STEPS.AGE]: { 
            field: "age", 
            min: CONSTANTS.MIN_AGE, 
            max: CONSTANTS.MAX_AGE, 
            unit: "سال", 
            label: "سن", 
            errorId: "age-error" 
        },
        [STEPS.HEIGHT]: { 
            field: "height", 
            min: CONSTANTS.MIN_HEIGHT, 
            max: CONSTANTS.MAX_HEIGHT, 
            unit: "سانتی‌متر", 
            label: "قد", 
            errorId: "height-error" 
        },
        [STEPS.WEIGHT]: { 
            field: "weight", 
            min: CONSTANTS.MIN_WEIGHT, 
            max: CONSTANTS.MAX_WEIGHT, 
            unit: "کیلوگرم", 
            label: "وزن", 
            errorId: "weight-error" 
        },
        [STEPS.TARGET_WEIGHT]: { 
            field: "targetWeight", 
            min: CONSTANTS.MIN_WEIGHT, 
            max: CONSTANTS.MAX_WEIGHT, 
            unit: "کیلوگرم", 
            label: "وزن هدف", 
            errorId: "targetWeight-error",
            customValidation: (value) => {
                const currentWeight = state.formData.weight;
                const goal = state.formData.goal;
                
                if (!currentWeight) return true;
                
                if (goal === "weight-loss" && value >= currentWeight) {
                    return `برای کاهش وزن، وزن هدف باید کمتر از وزن فعلی (${currentWeight} کیلوگرم) باشد`;
                }
                
                if (goal === "weight-gain" && value <= currentWeight) {
                    return `برای افزایش وزن، وزن هدف باید بیشتر از وزن فعلی (${currentWeight} کیلوگرم) باشد`;
                }
                
                if (goal === "fitness" && Math.abs(value - currentWeight) > 20) {
                    return `برای حفظ سلامت، وزن هدف باید حداکثر ۲۰ کیلوگرم با وزن فعلی تفاوت داشته باشد`;
                }
                
                return true;
            }
        }
    };
    
    if (errorMessages[step]) {
        const { field, min, max, unit, label, errorId, customValidation } = errorMessages[step];
        const value = state.formData[field];
        const errorElement = document.getElementById(errorId);
        
        if (!errorElement) return;

        if (value === undefined || value === null || value === "") {
            errorElement.textContent = "";
            errorElement.classList.remove("valid");
            if (nextButton) nextButton.disabled = true;
            return;
        }
        
        if (value < min || value > max) {
            errorElement.textContent = `${label} باید بین ${min} تا ${max} ${unit} وارد شود`;
            errorElement.classList.remove("valid");
            if (nextButton) nextButton.disabled = true;
            return;
        }
        
        if (step === STEPS.TARGET_WEIGHT && customValidation) {
            const validationResult = customValidation(value);
            if (validationResult !== true) {
                errorElement.textContent = validationResult;
                errorElement.classList.remove("valid");
                if (nextButton) nextButton.disabled = true;
                return;
            }
        }
        
        errorElement.innerHTML = `<span class="tick-icon"></span> مقدار وارد شده معتبر است.`;
        errorElement.classList.add("valid");
        if (nextButton) nextButton.disabled = false;
    }
}

window.calculateBMI = function(height, weight) {
    const heightInMeters = height / 100;
    const bmiValue = document.getElementById('bmi-value');
    const bmiCategory = document.getElementById('bmi-category');
    const bmiIndicator = document.getElementById('bmi-indicator');
    const bmiContainer = document.getElementById('bmi-result-container');
    
    if (!weight || weight === 0) {
        bmiContainer.style.opacity = '0.5';
        bmiIndicator.style.display = 'none';
        bmiValue.textContent = '0';
        bmiCategory.textContent = '';
        return;
    } else {
        bmiContainer.style.opacity = '1';
        bmiIndicator.style.display = 'block';
    }
    
    const bmi = (weight / (heightInMeters * heightInMeters)).toFixed(1);
    bmiValue.textContent = bmi;
    
    const categories = [
        { max: 18.5, text: 'کمبود وزن', color: '#4fc3f7' },
        { max: 25, text: 'وزن نرمال', color: '#66bb6a' },
        { max: 30, text: 'اضافه وزن', color: '#ffee58' },
        { max: 35, text: 'چاق', color: '#ffa726' },
        { max: Infinity, text: 'چاقی شدید', color: '#ef5350' }
    ];
    
    const category = categories.find(c => bmi < c.max);
    bmiCategory.textContent = category.text;
    bmiCategory.style.color = category.color;
    
    let position;
    if (bmi < 18.5) {
        position = (bmi / 18.5) * 20;
    } else if (bmi < 25) {
        position = 20 + ((bmi - 18.5) / 6.5) * 20;
    } else if (bmi < 30) {
        position = 40 + ((bmi - 25) / 5) * 20;
    } else if (bmi < 35) {
        position = 60 + ((bmi - 30) / 5) * 20;
    } else {
        position = 80 + ((Math.min(bmi, 50) - 35) / 15) * 20;
    }
    
    bmiIndicator.classList.add('animate-indicator');
    setTimeout(() => {
        bmiIndicator.style.left = `${Math.min(position, 100)}%`;
        bmiIndicator.style.transform = 'translateX(-50%)';
    }, 10);
    
    setTimeout(() => {
        bmiIndicator.classList.remove('animate-indicator');
    }, 800);
}
-----------------------------------------------------------------------------------------------------
// /home/aidastya/public_html/wp-content/themes/ai-assistant/assets/js/services/diet/script.js

/**
 * حالت اجرای برنامه:
 * 1 = حالت توسعه (Development) - نمایش دکمه‌های تست و پر کردن خودکار داده‌ها
 * 2 = حالت تولید (Production) - حالت نرمال بدون امکانات تست
 */
window.APP_MODE = 2; // این مقدار را برای تغییر حالت ویرایش کنید

window.state = {
    currentStep: 1,
    formData: {},
    
    updateStep(step) {
        this.currentStep = step;
        window.showStep(step);
        window.updateStepCounter(step);
        window.updateProgressBar(step);
        
        window.dispatchEvent(new CustomEvent('stateUpdated'));
        
        // پر کردن خودکار داده‌ها برای تست فقط در حالت توسعه
        if (window.APP_MODE === 1) {
            this.fillTestData(step);
        }        
    },
    
    updateFormData(key, value) {
        this.formData[key] = value;
        window.validateStep(this.currentStep);
    },
    
    // در بخش state در script.js
    fillTestData(step) {
        const testData = {
            gender: 'male',
            goal: 'weight-loss',
            age: 30,
            height: 175,
            weight: 80,
            targetWeight: 70,
            activity: 'medium',
            meals: '3',
            waterIntake: 8,
            surgery: ['none'],
            hormonal: ['hypothyroidism', 'pcos'],
            stomachDiscomfort: ['none'],
            additionalInfo: ['diabetes'],
            foodRestrictions: ['vegetarian']
        };
    
        // فقط اگر داده‌ای وجود ندارد مقداردهی کنیم
        Object.keys(testData).forEach(key => {
            if (this.formData[key] === undefined) {
                this.formData[key] = testData[key];
            }
        });
    
        // اینجا باید المان‌های فرم را بر اساس state به روز کنیم
        this.updateFormElementsFromState();
    },
    
    updateFormElementsFromState() {
        // به روزرسانی جنسیت
        if (this.formData.gender) {
            const genderOption = document.querySelector(`.gender-option[data-gender="${this.formData.gender}"]`);
            if (genderOption) genderOption.classList.add('selected');
        }
    
        // به روزرسانی هدف
        if (this.formData.goal) {
            const goalOption = document.querySelector(`.goal-option[data-goal="${this.formData.goal}"]`);
            if (goalOption) goalOption.classList.add('selected');
        }
    
        // به روزرسانی فیلدهای عددی
        const numberFields = {
            'age-input': 'age',
            'height-input': 'height',
            'weight-input': 'weight',
            'target-weight-input': 'targetWeight'
        };
        
        Object.entries(numberFields).forEach(([id, key]) => {
            if (this.formData[key]) {
                const input = document.getElementById(id);
                if (input) {
                    input.value = this.formData[key];
                    // تریگر رویداد input برای به روزرسانی نمایش
                    input.dispatchEvent(new Event('input'));
                }
            }
        });
    
        // به روزرسانی چک‌باکس‌ها
        const checkboxGroups = {
            'surgery': this.formData.surgery || [],
            'hormonal': this.formData.hormonal || [],
            'stomachDiscomfort': this.formData.stomachDiscomfort || [],
            'additionalInfo': this.formData.additionalInfo || [],
            'foodRestrictions': this.formData.foodRestrictions || []
        };
    
        Object.entries(checkboxGroups).forEach(([prefix, items]) => {
            items.forEach(item => {
                const checkboxId = `${prefix}-${item}`.replace('Discomfort', '');
                const checkbox = document.getElementById(checkboxId);
                if (checkbox) {
                    checkbox.checked = true;
                    // تریگر تغییر برای اعمال استایل
                    checkbox.dispatchEvent(new Event('change'));
                }
            });
        });
    
        // به روزرسانی فعالیت
        if (this.formData.activity) {
            const activityOption = document.querySelector(`.activity-option[data-activity="${this.formData.activity}"]`);
            if (activityOption) activityOption.classList.add('selected');
        }
    
        // به روزرسانی وعده‌های غذایی
        if (this.formData.meals) {
            const mealOption = document.querySelector(`.meal-option[data-meals="${this.formData.meals}"]`);
            if (mealOption) mealOption.classList.add('selected');
        }
        
        if (this.formData.waterIntake !== undefined && this.formData.waterIntake !== null) {
            const waterCups = document.querySelectorAll('.water-cup');
            const waterAmount = this.formData.waterIntake;
            
            // انتخاب لیوان‌ها
            waterCups.forEach((cup, index) => {
                const cupAmount = parseInt(cup.dataset.amount);
                if (cupAmount <= waterAmount) {
                    cup.classList.add('selected');                    
                }
            });
    
            // به روزرسانی نمایش مقدار آب
            const waterAmountDisplay = document.getElementById('water-amount');
            const waterLiterDisplay = document.getElementById('water-liter');
            if (waterAmountDisplay && waterLiterDisplay) {
                waterAmountDisplay.textContent = waterAmount;
                waterLiterDisplay.textContent = (waterAmount * 0.25).toFixed(1);
            }
            
            // غیرفعال کردن گزینه "نمی‌دانم"
            const dontKnowCheckbox = document.getElementById('water-dont-know');
            if (dontKnowCheckbox) {
                dontKnowCheckbox.checked = false;
                dontKnowCheckbox.nextElementSibling.classList.remove('checked');
            }
        }   
        
        // به روزرسانی چک‌باکس شرایط و قوانین
        const confirmTermsCheckbox = document.getElementById('confirm-terms');
        if (confirmTermsCheckbox) {
            confirmTermsCheckbox.checked = true;
            // تریگر رویداد change برای اعمال استایل
            confirmTermsCheckbox.dispatchEvent(new Event('change'));
            
            // فعال کردن گزینه‌های جنسیت
            document.querySelectorAll('.gender-option').forEach(option => {
                option.style.opacity = "1";
                option.style.pointerEvents = "auto";
                option.style.filter = "none";
            });
        }  
        
        // به روزرسانی اطلاعات تکمیلی (مرحله 14)
        if (this.formData.additionalInfo) {
            this.formData.additionalInfo.forEach(item => {
                const checkboxId = `info-${item}`;
                const checkbox = document.getElementById(checkboxId);
                if (checkbox) {
                    checkbox.checked = true;
                    const label = checkbox.nextElementSibling;
                    if (label) label.classList.add('checked');
                }
            });
        }
    
        // به روزرسانی محدودیت‌های غذایی (مرحله 15)
        if (this.formData.foodRestrictions) {
            this.formData.foodRestrictions.forEach(item => {
                const checkboxId = `restriction-${item}`;
                const checkbox = document.getElementById(checkboxId);
                if (checkbox) {
                    checkbox.checked = true;
                    const label = checkbox.nextElementSibling;
                    if (label) label.classList.add('checked');
                }
            });
        }        
    }
};

window.THEME = {
    init: function() {
        this.loadTheme();
        this.setupToggleButton();
    },
    
    loadTheme: function() {
        const savedTheme = localStorage.getItem('diet-theme') || 'light';
        document.body.classList.toggle('dark-mode', savedTheme === 'dark');
    },
    
    toggleTheme: function() {
        const isDark = document.body.classList.toggle('dark-mode');
        localStorage.setItem('diet-theme', isDark ? 'dark' : 'light');
        this.updateToggleIcon();
    },
    
    setupToggleButton: function() {
        const toggleBtn = document.createElement('button');
        toggleBtn.className = 'theme-toggle';
        toggleBtn.title = 'تغییر تم';
        toggleBtn.innerHTML = `
            <svg class="moon-icon" viewBox="0 0 24 24">
                <path d="M12,3c-4.97,0-9,4.03-9,9s4.03,9,9,9s9-4.03,9-9c0-0.46-0.04-0.92-0.1-1.36c-0.98,1.37-2.58,2.26-4.4,2.26 c-2.98,0-5.4-2.42-5.4-5.4c0-1.81,0.89-3.42,2.26-4.4C12.92,3.04,12.46,3,12,3L12,3z"/>
            </svg>        
            <svg class="sun-icon" viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="7" fill="#FFD700"/>
                <line x1="12" y1="0.5" x2="12" y2="3.5" stroke="#FFD700" stroke-width="2"/>
                <line x1="12" y1="20.5" x2="12" y2="23.5" stroke="#FFD700" stroke-width="2"/>
                <line x1="0.5" y1="12" x2="3.5" y2="12" stroke="#FFD700" stroke-width="2"/>
                <line x1="20.5" y1="12" x2="23.5" y2="12" stroke="#FFD700" stroke-width="2"/>
                <line x1="3.8" y1="3.8" x2="6.2" y2="6.2" stroke="#FFD700" stroke-width="2"/>
                <line x1="17.8" y1="17.8" x2="20.2" y2="20.2" stroke="#FFD700" stroke-width="2"/>
                <line x1="3.8" y1="20.2" x2="6.2" y2="17.8" stroke="#FFD700" stroke-width="2"/>
                <line x1="17.8" y1="6.2" x2="20.2" y2="3.8" stroke="#FFD700" stroke-width="2"/>
            </svg>    
        `;
        
        toggleBtn.addEventListener('click', () => this.toggleTheme());
        document.body.appendChild(toggleBtn);
        this.updateToggleIcon();
    },
    
    updateToggleIcon: function() {
        const isDark = document.body.classList.contains('dark-mode');
        const toggleBtn = document.querySelector('.theme-toggle');
        if (toggleBtn) {
            toggleBtn.title = isDark ? 'تغییر به تم روشن' : 'تغییر به تم تاریک';
        }
    }
};

// فراخوانی در هنگام لود صفحه
document.addEventListener('DOMContentLoaded', () => {
    THEME.init();
});

window.CONSTANTS = {
    MIN_AGE: 18,
    MAX_AGE: 80,
    MIN_HEIGHT: 90,
    MAX_HEIGHT: 250,
    MIN_WEIGHT: 35,
    MAX_WEIGHT: 180
};

window.STEPS = {
    GENDER: 1,
    GOAL: 2,
    AGE: 3,
    HEIGHT: 4,
    WEIGHT: 5,
    TARGET_WEIGHT: 6,
    GOAL_DISPLAY: 7,
    SURGERY: 8,
    HORMONAL: 9, 
    STOMACH: 10,
    WATER_INTAKE: 11,
    ACTIVITY: 12,
    MEALS: 13,
    ADDITIONAL_INFO: 14,
    FOOD_RESTRICTIONS: 15,
    TERMS_AGREEMENT: 16, // مرحله جدید
    CONFIRMATION: 17 // مرحله خلاصه اطلاعات (همان 16 قبلی)
};

window.totalSteps = Object.keys(STEPS).length;
-----------------------------------------------------------------------------------------------------
/*/home/aidastya/public_html/wp-content/themes/ai-assistant/assets/css/services/diet.css*/
@font-face {
    font-family: Vazir;
    src: url('../../fonts/Vazir.woff2') format('woff2'),
         url('../../fonts/Vazir.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: BordeauxBlack;
    src: url('../../fonts/BordeauxBlack.woff2') format('woff2'),
         url('../../fonts/BordeauxBlack.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

:root {
    --primary-color: #00857a;
    --secondary-color: #00665c;
    --background-color: #f5f5f5;
    --text-color: #333;
    --light-text-color: #7e7c7c;
    --border-color: #e0e0e0;
    --error-background: #e6f3ff;
    --error-border: #b3d7ff;
    --valid-background: #e6f4ea;
    --valid-border: #34c759;
    --valid-text: #2e7d32;
    --input-focus-bg: #e0f2f1;
    --input-focus-border: #00857a;
    --option-bg: #f0faf9;
    --option-selected-bg: #FFF7DF;
    --option-selected-border: #EEB600;
    --button-bg: #97e0db;
    --button-hover-bg: #00665c;
    --button-text: #fff;
    --progress-bar-bg: #e0e0e0;
    --progress-bar-fill: #F4C017;
    --orange-color: #FFA500;
    --orange-shadow: rgba(255, 165, 0, 0.3);
    --orange-light-shadow: rgba(255, 165, 0, 0.15);
    --white-color: #fff;
    --shadow-color: rgba(0, 0, 0, 0.05);
    --light-shadow: rgba(0, 0, 0, 0.1);
    --pulse-glow: rgba(0, 133, 122, 0.4);
    --transparent: transparent;
}

body {
    font-family: Vazir, Tahoma, sans-serif;
    background-color: var(--white-color) !important;
    color: var(--text-color);
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    overflow: hidden;
    direction: rtl;
}

#multi-step-form {
    width: 100%;
    max-width: 500px;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    background: var(--white-color);
    position: relative;
    overflow: hidden;
    justify-content: flex-start;
    padding-top: 60px;
    margin: 0 auto;
}

#header-container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    width: 100%;
    max-width: 1032px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    z-index: 1;
    background: var(--white-color);
    padding: 10px 20px;
    box-sizing: border-box;
}

#step-counter {
    font-size: 14px;
    font-weight: 300;
    color: var(--text-color);
}

#current-step {
    color: var(--primary-color);
}

#header-container::before {
    content: "AiDASTYAR";
    font-family: BordeauxBlack, sans-serif;
    font-size: 24px;
    color: var(--primary-color);
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

#back-button {
    background: none;
    border: none;
    font-size: 30px;
    color: var(--primary-color);
    cursor: pointer;
    padding: 0;
}

#back-button:hover {
    color: var(--secondary-color);
}

#progress-bar-container {
    position: fixed;
    top: 60px;
    left: 0;
    right: 0;
    width: calc(100% - 40px);
    max-width: 1032px;
    height: 4px;
    margin: 0 auto;
    background-color: var(--progress-bar-bg);
    border-radius: 3px;
    overflow: hidden;
}

#progress-bar {
    height: 100%;
    width: 0%;
    background-color: var(--progress-bar-fill);
    border-radius: 3px;
    transition: width .3s ease;
}

.step {
    display: none;
    width: 100%;
    text-align: center;
    padding: 0 15px;
}

.step.active {
    display: block;
}

#form-title {
    font-size: 24px;
    font-weight: bold;
    color: var(--text-color);
    margin-bottom: 20px;
    position: fixed;
    top: 80px;
    left: 0;
    right: 0;
    text-align: center;
}

h2 {
    font-size: 17px;
    font-weight: bold;
    margin-bottom: 20px;
    text-align: right;
    width: 100%;
    max-width: 500px;
    margin-right: auto;
    margin-left: auto;
    padding-right: 15px;
    box-sizing: border-box;
}

.input-container {
    position: relative;
    display: inline-block;
    width: 100%;
    max-width: 500px;
    text-align: right;
}

.input-container input {
    width: 100%;
    padding: 15px;
    text-align: right;
    font-size: 16px;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--transparent);
    color: var(--transparent);
    caret-color: #000;
    box-sizing: border-box;
    transition: background-color .3s, border-color .3s;
    direction: ltr;
}

.input-container input:focus {
    background-color: var(--input-focus-bg);
    border-color: var(--input-focus-border);
    outline: none;
}

.input-container span {
    position: absolute;
    left: auto;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    color: #999;
    font-size: 16px;
    white-space: nowrap;
}

.error-message {
    color: var(--text-color);
    background-color: var(--error-background);
    padding: 10px 15px;
    border-radius: 8px;
    border: 1px solid var(--error-border);
    font-size: 14px;
    margin-top: 10px;
    width: 100%;
    max-width: 500px;
    box-sizing: border-box;
    transition: background-color 0.3s ease, border-color 0.3s ease;
    display: flex;
    margin-left: auto;
    margin-right: auto;
}

.error-message.valid {
    background-color: var(--valid-background);
    border-color: var(--valid-border);
    color: var(--valid-text);
}

.error-message .tick-icon {
    display: none;
    width: 16px;
    height: 16px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%232e7d32"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z"/></svg>');
    background-repeat: no-repeat;
    background-size: contain;
    margin-left: 8px;
}

.error-message.valid .tick-icon {
    display: inline-block;
}

.ai-response-content {
    
  max-height: 300px;
  max-width: 100%;
  overflow: auto; /* اسکرول در هر دو جهت */
}

#goal-selection,
#activity-selection,
#meal-selection {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
    width: 100%;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
    text-align: right;
}

.goal-option,
.activity-option,
.meal-option {
    display: flex;
    flex-direction: row-reverse;
    align-items: center;
    text-align: right;
    direction: rtl;
    padding: 15px;
    justify-content: flex-end;
    border: 1.5px solid var(--input-focus-bg);
    border-radius: 8px;
    background-color: var(--option-bg);
    margin-bottom: 10px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.goal-option img,
.activity-option img,
.meal-option img {
    width: 60px;
    height: 30px;
    object-fit: contain;
    margin-left: 15px;
}

.goal-option span,
.activity-option span,
.meal-option span {
    flex: 1;
    text-align: right;
    font-size: 12px;
    font-weight: bold;
}

.goal-option.selected,
.activity-option.selected,
.meal-option.selected {
    border-color: var(--orange-color);
    background-color: var(--option-selected-bg);
    transform: scale(1.02);
    box-shadow: 0 5px 15px var(--orange-shadow);
}

#next-button-container {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--white-color);
    padding: 15px 20px;
    text-align: center;
    box-shadow: 0 -2px 10px var(--shadow-color);
    display: none;
}

button.next-step {
    width: 100%;
    max-width: 500px;
    padding: 18px;
    border: none;
    border-radius: 8px;
    background-color: var(--button-bg);
    color: var(--button-text);
    font-size: 18px;
    cursor: pointer;
    transition: background-color .3s;
}

button.next-step:not(:disabled) {
    background-color: var(--primary-color);
}

button.next-step:not(:disabled):hover {
    background-color: var(--button-hover-bg);
}

button.next-step:disabled {
    cursor: not-allowed;
    opacity: 0.7;
}

#submit-button-container {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--white-color);
    padding: 15px 20px;
    text-align: center;
    box-shadow: 0 -2px 10px var(--shadow-color);
    display: none;
}

button.submit-form {
    width: 100%;
    max-width: 500px;
    padding: 18px;
    border: none;
    border-radius: 8px;
    background-color: var(--primary-color);
    color: var(--button-text);
    font-size: 18px;
    cursor: pointer;
    transition: background-color .3s;
}

button.submit-form:hover {
    background-color: var(--button-hover-bg);
}

#additional-info-selection,
#food-restriction-selection {
    display: flex;
    flex-direction: column;
    gap: 10px;
    width: 100%;
    max-width: 500px;
    margin: 20px auto;
}

.checkbox-container {
    position: relative;
    margin-bottom: 10px;
}

.real-checkbox {
    position: absolute;
    opacity: 0;
}

.checkbox-label {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border: 1.5px solid var(--input-focus-bg);
    border-radius: 8px;
    background-color: var(--option-bg);
    color: var(--text-color);
    font-size: 16px;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.checkbox-label:hover {
    background-color: var(--option-selected-bg);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px var(--light-shadow);
}

.check-icon {
    display: inline-block;
    width: 20px;
    height: 20px;
    border: 2px solid var(--border-color);
    border-radius: 4px;
    margin-left: 10px;
    position: relative;
    transition: all 0.3s ease;
}

/* در بخش تم تاریک (dark-mode) */
body.dark-mode .check-icon {
    border-color: #a0a0a0;
    background-color: rgba(77, 182, 172, 0.1);
}

body.dark-mode .real-checkbox:checked + .checkbox-label .check-icon {
    background-color: #4db6ac;
    border-color: #4db6ac;
    box-shadow: 0 0 0 2px rgba(77, 182, 172, 0.3);
}

body.dark-mode .real-checkbox:checked + .checkbox-label .check-icon::after {
    border-color: #121212; /* رنگ تیک داخل چک باکس */
}

/* افکت hover در حالت تاریک */
body.dark-mode .checkbox-label:hover .check-icon {
    border-color: #80deea;
    background-color: rgba(77, 182, 172, 0.2);
}

/* انیمیشن در حالت تاریک */
body.dark-mode .checked-animation .check-icon {
    animation: darkCheckBounce 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

@keyframes darkCheckBounce {
    0% { 
        transform: scale(0.8); 
        box-shadow: 0 0 0 0 rgba(77, 182, 172, 0.4);
    }
    50% { 
        transform: scale(1.2); 
        box-shadow: 0 0 0 10px rgba(77, 182, 172, 0.1);
    }
    100% { 
        transform: scale(1); 
        box-shadow: 0 0 0 0 rgba(77, 182, 172, 0);
    }
}

.real-checkbox:checked + .checkbox-label .check-icon {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.real-checkbox:checked + .checkbox-label .check-icon::after {
    content: "";
    position: absolute;
    left: 5px;
    top: 1px;
    width: 6px;
    height: 12px;
    border: solid var(--white-color);
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
}

.real-checkbox:checked + .checkbox-label {
    background-color: var(--option-selected-bg);
    border-color: var(--orange-color);
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 4px 12px var(--orange-light-shadow);
}

.label-text {
    flex: 1;
    text-align: right;
}

.separator {
    position: relative;
    height: 1px;
    margin: 20px 0;
    background: linear-gradient(to right, var(--transparent), var(--border-color), var(--transparent));
}

.separator::after {
    content: "یا";
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: var(--white-color);
    padding: 0 15px;
    color: var(--text-color);
    font-size: 14px;
}

#summary-container {
    max-height: calc(60vh - 100px);
    overflow-y: auto;
    margin-top: 20px;
    width: 100%;
    padding-bottom: 20px;
    max-width: 500px;
    margin: 20px auto;
    box-sizing: border-box;
}

.summary-item {
    display: flex;
    justify-content: space-between;
    padding: 12px 15px;
    margin: 8px 0;
    background-color: var(--option-bg);
    border-radius: 8px;
    font-size: 16px;
    max-width: 500px;
}

.summary-label {
    font-weight: bold;
    color: var(--primary-color);
}

.summary-value {
    color: var(--text-color);
}

#confirmation-checkbox {
    margin: 20px auto;
    width: 100%;
    max-width: 500px;
    padding: 0 20px;
    box-sizing: border-box;
}

#confirmation-checkbox .checkbox-label {
    background-color: var(--valid-background);
    border-color: var(--valid-border);
    padding: 15px;
    margin-bottom: 20px;
}

#gender-selection {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin: 30px 0;
    flex-wrap: nowrap;
    padding: 0;
}

#gender-selection-step h2 {
    margin-top: 90px;
    text-align: center;
}

#gender-selection-step h1 {
    font-size: 18px;
}

.gender-option {
    cursor: pointer;
    text-align: center;
    border: 2px solid var(--transparent);
    border-radius: 10px;
    padding: 10px;
    transition: all 0.3s ease;
    flex: 1;
    max-width: 120px;
    opacity: 0.5;
    pointer-events: none;
    filter: grayscale(80%);
    transform: scale(0.95);
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
}

.gender-option.active {
    opacity: 1;
    pointer-events: auto;
    filter: none;
}

.gender-option.selected {
    border-color: var(--primary-color);
    transform: scale(1.05);
    box-shadow: 0 10px 25px rgba(0, 133, 122, 0.3);
}

.gender-option img {
    width: 100%;
    height: auto;
    border-radius: 50%;
}

#terms-checkbox {
    width: 95%;
    max-width: 500px;
    margin: 20px auto;
}

.terms-combined {
    margin: 15px 0;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 8px;
    background: var(--option-bg);
}

.terms-combined .checkbox-label {
    border: none;
    background: transparent;
    padding: 10px 5px;
    margin-bottom: 5px;
}

.terms-combined .terms-box {
    max-height: 120px;
    margin: 0;
    border: none;
    border-top: 1px dashed var(--border-color);
    border-radius: 0;
    padding: 8px 5px 0 5px;
    font-size: 12px;
    overflow-y: auto;
}

.terms-list {
    list-style-type: none;
    padding: 0;
    margin: 0;
    text-align: justify;
    line-height: 1.5;
    padding-right: 8px;
}

.terms-list li {
    position: relative;
    margin-bottom: 5px;
    padding-right: 25px;
    font-size: 11px;
    line-height: 1.4;
}

.terms-list li:before {
    content: "";
    position: absolute;
    right: 0;
    top: 5px;
    width: 12px;
    height: 12px;
    background-size: contain;
    background-repeat: no-repeat;
}

.terms-list li:nth-child(1):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>');
}

.terms-list li:nth-child(2):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>');
}

.terms-list li:nth-child(3):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg>');
}

.terms-list li:nth-child(4):before {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2300857a"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 10.99h7c-.53 4.12-3.28 7.79-7 8.94V12H5V6.3l7-3.11V11.99z"/></svg>');
}

@keyframes checkBounce {
    0% { transform: scale(0.8); opacity: 0.5; }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); opacity: 1; }
}

@keyframes pulseGlow {
    0% { box-shadow: 0 0 0 0 var(--pulse-glow); }
    70% { box-shadow: 0 0 0 10px var(--transparent); }
    100% { box-shadow: 0 0 0 0 var(--transparent); }
}

.checked-animation .check-icon {
    animation: checkBounce 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.checked-animation {
    animation: pulseGlow 0.8s ease;
    border-color: var(--orange-color);
}

.info-text {
    display: flex;
    flex-direction: column;
    gap: 8px;
    text-align: right;
    direction: rtl;
    line-height: 1.6;
    font-size: 14px;
    flex-grow: 1;
    width: 100%;
}

.first-line {
    font-weight: 500;
    text-align: justify;
    text-align-last: right;
}

.second-line {
    color: var(--light-text-color);
    text-align: right;
    padding-right: 0;
    margin-right: 0;
    display: block;
    width: 100%;
    text-align: justify;
}

.info-content {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    width: 100%;
}

.info-box {
    background-color: var(--error-background);
    border: 1px solid var(--error-border);
    border-radius: 8px;
    padding: 15px;
    width: calc(100% - 30px);
    max-width: 500px;
    margin-top: 10px;
}

#age-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#age-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#age-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

.separator-dotted {
    height: 1px;
    background: repeating-linear-gradient(
        to right,
        var(--border-color),
        var(--border-color) 2px,
        transparent 2px,
        transparent 4px
    );
    margin: 0 15px;
}

#height-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#height-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#height-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

#weight-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#weight-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#weight-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

#bmi-result-container {
    padding: 15px;
    margin-bottom: 15px;
}

.bmi-info {
    text-align: center;
    margin-bottom: 20px;
}

.bmi-info h3 {
    font-size: 18px;
    color: var(--primary-color);
    margin-bottom: 5px;
}

.bmi-category {
    font-size: 16px;
    font-weight: bold;
}

.bmi-scale-container {
    margin-top: 20px;
}

.bmi-scale-labels {
    display: flex;
    justify-content: space-between;
    margin-bottom: 5px;
    font-size: 12px;
    color: var(--light-text-color);
    direction: ltr;
}

.bmi-scale {
    height: 20px;
    background: linear-gradient(to right, 
        #4fc3f7, 
        #66bb6a 20%, 
        #ffee58 40%, 
        #ffa726 60%, 
        #ef5350 80%);
    border-radius: 10px;
    position: relative;
    overflow: hidden;
}

.bmi-indicator {
    position: absolute;
    top: -8px;
    width: 6px;
    height: 34px;
    background: linear-gradient(to bottom, #555, #222);
    border-radius: 3px;
    transform: translateX(-50%);
    transition: left 0.6s cubic-bezier(0.25, 0.1, 0.25, 1);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    display: none;
    z-index: 2;
}

.bmi-indicator::after {
    content: '';
    position: absolute;
    top: -10px;
    left: -5px;
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 10px solid #222;
    filter: drop-shadow(0 2px 2px rgba(0,0,0,0.2));
}

#bmi-result-container {
    transition: opacity 0.3s ease;
}

#target-weight-validation-container {
    width: 100%;
    max-width: 500px;
    margin: 10px auto 0;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

#target-weight-validation-container .error-message {
    margin: 0;
    padding: 15px;
    border-radius: 0;
    border: none;
    border-bottom: 1px dashed var(--border-color);
}

#target-weight-validation-container .info-box {
    margin: 0;
    padding: 15px;
    border: none;
    border-radius: 0;
    background-color: transparent;
}

#goal-result {
    width: 100%;
    max-width: 600px;
    margin: 0 auto;
    text-align: center;
    flex: 1;
    display: flex;
    flex-direction: column;
}

.chart-container {
    position: relative;
    width: 100%;
    flex: 1;
    min-height: 300px;
    margin: 0 auto;
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.8s ease-out;
}

.chart-container.animate-chart {
    opacity: 1;
    transform: translateY(0);
}

.chart-message {
    margin-top: 15px;
    padding: 15px;
    background-color: rgba(0, 133, 122, 0.1);
    border-radius: 8px;
    font-size: 15px;
    line-height: 1.6;
    color: var(--text-color);
    border-right: 3px solid var(--primary-color);
    text-align: justify;
    margin-bottom: 20px;
}

@media (min-width: 768px) {
    body {
        background-color: var(--white-color);
    }
    
    .input-container,
    #goal-selection,
    #activity-selection,
    #meal-selection,
    button.next-step {
        width: 500px;
    }
    
    #goal-weight-display {
        height: calc(100vh - 160px); /* ارتفاع کمتر در موبایل */
    }
    
    .chart-container {
        min-height: 250px;
    }
    
    .chart-message {
        font-size: 14px;
        padding: 12px;
        margin-top: 10px;
    }
}

@media (max-width: 768px) {
    #header-container {
        padding: 10px 15px;
    }
    
    #progress-bar-container {
        width: calc(100% - 30px);
    }
    
    .chart-container {
        height: 60vh !important;
        max-height: 500px;
        min-height: 350px;
    }
    
    #goal-result {
        margin: 20px auto;
    }
    
    .chart-message {
        margin-top: 20px;
        padding: 12px;
        font-size: 14px;
    }
}

.step[data-step="3"] ~ #next-button-container,
.step[data-step="4"] ~ #next-button-container,
.step[data-step="5"] ~ #next-button-container,
.step[data-step="6"] ~ #next-button-container,
.step[data-step="7"] ~ #next-button-container,
.step[data-step="10"] ~ #next-button-container,
.step[data-step="11"] ~ #next-button-container,
.step[data-step="12"] ~ #next-button-container {
    display: block;
}


#goal-weight-display {
    display: none;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    padding: 20px;
    padding-top: 0px;
}

.step.active#goal-weight-display {
    display: flex; 
}

.step7-image-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 30px;
    padding: 0px;
}

.step7-image-container svg {
    max-width: 100%;
    height: auto;
}

/* استایل مخصوص حالت افزایش وزن */
.step7-image-container svg[width="592px"] image:nth-child(2) {
    transform: translateX(-50%);
}

@media (max-width: 768px) {
    .step7-image-container svg {
        width: 100%;
        height: auto;
    }
    
    .step7-image-container svg[width="592px"] image:nth-child(2) {
        transform: none;
    }
}


.weight-display-container {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    gap: 10px;
    width: 100%;
    max-width: 500px;
    margin: 0px auto 0;
    padding: 0 0px;
    box-sizing: border-box;
}

.weight-display-box {
    width: calc(50% - 5px);
    height: 90px;
    background: linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%);
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 12px;
    border: 1px solid rgba(0, 133, 122, 0.1);
    position: relative;
    overflow: hidden;
}

.weight-display-box.current-weight::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #ff929a, #ffe0e3);
}

.weight-display-box.target-weight::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: linear-gradient(90deg, #00857a, #00b4a0);
}

.weight-value {
    font-size: 26px;
    font-weight: bold;
    line-height: 1;
    margin-bottom: 4px;
    font-family: 'BordeauxBlack', sans-serif;
}

.weight-display-box.current-weight .weight-value {
    color: #ff9099;
}

.weight-display-box.target-weight .weight-value {
    color: #00857a;
}

.weight-unit {
    font-size: 12px;
    color: #666;
    margin-bottom: 6px;
}

.weight-label {
    font-size: 11px;
    color: #888;
    text-align: center;
    padding-top: 5px;
    border-top: 1px dashed rgba(0, 0, 0, 0.1);
    width: 100%;
}

/* در بخش تم تاریک (dark-mode) فایل CSS */
body.dark-mode .weight-display-box {
    background: linear-gradient(135deg, #2d2d2d 0%, #1e1e1e 100%);
    border: 1px solid rgba(77, 182, 172, 0.3);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

body.dark-mode .weight-display-box.current-weight::before {
    background: linear-gradient(90deg, #ff929a, #ffe0e3);
}

body.dark-mode .weight-display-box.target-weight::before {
    background: linear-gradient(90deg, #4db6ac, #00897b);
}

body.dark-mode .weight-value {
    color: #fff;
}

body.dark-mode .weight-display-box.current-weight .weight-value {
    color: #ff9099;
}

body.dark-mode .weight-display-box.target-weight .weight-value {
    color: #4db6ac;
}

body.dark-mode .weight-unit {
    color: #b0b0b0;
}

body.dark-mode .weight-label {
    color: #a0a0a0;
    border-top: 1px dashed rgba(255, 255, 255, 0.1);
}

@media (max-width: 500px) {
    .weight-display-container {
        /*width: calc(100% - 40px);*/
        max-width: 100%;
        padding: 0;
        gap: 8px;
    }
    
    .weight-display-box {
        width: calc(50% - 4px);
        height: 85px;
        padding: 10px;
    }
}

@media (max-width: 480px) {
    .weight-display-container {
        flex-direction: row;
        gap: 8px;
        padding: 0 0px;
    }
    
    .weight-display-box {
        width: 42%;
        height: 85px;
        padding: 10px;
    }
    
    .weight-value {
        font-size: 24px;
    }
    
    .weight-unit {
        font-size: 11px;
    }
    
    .weight-label {
        font-size: 10px;
    }
}

.goal-title-container {
    width: 100%;
    text-align: center;
}

.goal-title {
    font-size: 18px;
    color: #00857a;
    margin: 0;
    padding: 8px 15px;
    display: inline-block;
}

.goal-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 3px;
    background: linear-gradient(90deg, #00857a, #00b4a0);
    border-radius: 3px;
}

@media (max-width: 768px) {
    .goal-title {
        font-size: 18px;
        padding-top: 20px;
    }
}

@media (max-width: 768px) {
    .goal-title-container {
        display: block;
    }
}

@media (min-width: 769px) {
    .goal-title-container {
        display: none;
    }
}

#goal-title-text {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.5s ease-out;
    text-align: center;
}

.step.active #goal-title-text {
    opacity: 1;
    transform: translateY(0);
}
.goal-svg {
    width: 100%;
    height: auto;
    max-width: 592px;
    max-height: 392px;
    display: block;
    margin: 0 auto;
}

.weight-display-container {
    position: relative;
    z-index: 2;
}

.checkbox-step-container {
    padding: 0 15px;
    width: 100%;
    max-width: 500px;
}
.checkbox-list-container {
    position: relative;    
    max-height: 45vh;
    min-height: 250px;
    overflow-y: auto;
    padding: 10px 5px;
    margin: 5px auto;
    scrollbar-width: none;
    scrollbar-color: var(--primary-color) var(--background-color);
    -ms-overflow-style: none;
    mask-image: none;
}
.checkbox-list-container::-webkit-scrollbar {
    display: none;
}
.checkbox-list-container::-webkit-scrollbar-track {
    background: var(--background-color);
    border-radius: 3px;
}
.checkbox-list-container::-webkit-scrollbar-thumb {
    background-color: var(--primary-color);
    border-radius: 3px;
}
button.submit-form:disabled {
    cursor: not-allowed;
    opacity: 0.7;
    background-color: var(--button-bg) !important;
}
#stomach-discomfort-step h3 {
    font-size: 15px;
    color: var(--primary-color);
    margin: 15px 0 10px;
    text-align: right;
    padding-right: 10px;
}


/* استایل آب داخل لیوان */
.water-cup::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 0;
    background: linear-gradient(to top, #4fc3f7, #80deea);
    transition: height 0.5s ease-out;
    border-radius: 0 0 13px 13px;
}

.water-cup.selected::after {
    height: 85%; /* کاهش حجم آب برای نمایش موج */
}

/* افکت‌های تعاملی */
.water-cup:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 15px rgba(0, 150, 136, 0.3);
}

.water-cup.selected {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 133, 122, 0.4);
}

/* استایل نمایش مقدار آب */
.water-amount-display {
    margin: 10px 0;
    text-align: center;
    min-height: 40px;
}

.water-amount-text {
    font-size: 18px;
    font-weight: bold;
    color: #00857a;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 5px;
}

.water-liter {
    font-size: 16px;
    color: var(--light-text-color);
    font-weight: normal;
}

.dont-know-text {
    font-size: 16px;
    color: #ff6d00;
    font-style: italic;
    margin-top: 5px;
}

.dont-know-container {
    margin: 15px 0 5px;
    padding: 10px 0;
    border-top: 1px dashed var(--border-color);
}

.stand-alone-none .checkbox-label {
    background-color: var(--option-bg);
    border-color: var(--border-color);
}

.stand-alone-none .checkbox-label:hover {
    background-color: var(--option-selected-bg);
    border-color: var(--orange-color);
}

.stand-alone-none .real-checkbox:checked + .checkbox-label {
    background-color: var(--option-selected-bg);
    border-color: var(--orange-color);
}

.stand-alone-none .checkbox-label {
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.stand-alone-none .real-checkbox:checked + .checkbox-label {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 4px 12px var(--orange-light-shadow);
}

.water-cups-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin: 20px 0;
}

.water-cup-row {
    display: flex;
    justify-content: center;
    gap: 5px;
}

.water-cup {
    width: 40px;
    height: 50px;
    background-color: #e0f7fa;
    border: 2px solid #b2ebf2;
    border-radius: 0 0 12px 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

#terms-agreement-step {
    padding: 20px 15px;
    text-align: right;
    direction: rtl;
}

.terms-agreement-content {
    font-size: 14px;
    line-height: 1.8;
}

.terms-section {
    margin-bottom: 20px;
}

.terms-section h3 {
    color: #00857a;
    font-size: 15px;
    margin: 15px 0 10px;
    border-bottom: 1px dashed #b2ebf2;
    padding-bottom: 5px;
}

.terms-section p, .terms-section li {
    text-align: justify;
    text-align-last: right;
}

.terms-section ul {
    padding-right: 20px;
    margin: 10px 0;
}

#terms-agreement-checkbox .checkbox-label {
    background-color: #f0faf9;
    border: 1.5px solid #b2ebf2;
    padding: 15px;
}

#terms-agreement-container {
    max-height: 60vh;
    overflow-y: auto;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 20px;
    background: #f9f9f9;
}

@media (max-width: 768px) {
    #terms-agreement-container {
        max-height: 55vh;
        padding: 15px;
    }
}

/* در بخش تم تاریک (dark-mode) */
body.dark-mode #terms-agreement-container {
    background: #1e1e1e;
    border: 1px solid #333;
    color: #e0e0e0;
}

body.dark-mode .terms-section h3 {
    color: #4db6ac;
    border-bottom: 1px dashed #4db6ac;
}

body.dark-mode .terms-section p, 
body.dark-mode .terms-section li {
    color: #d0d0d0;
}

body.dark-mode #terms-agreement-checkbox .checkbox-label {
    background-color: #252525;
    border-color: #4db6ac;
}

.diffrent-category-titles {
    font-size: 15px;
    color: #00857a;
    margin: 20px 0 10px;
    padding-right: 10px;
    text-align: right;
    border-bottom: 1px dashed #b2ebf2;
    padding-bottom: 5px;
}

.female-only {
    display: none;
}

body[data-gender="female"] .female-only {
    display: block;
}

#dev-tools {
    position: fixed;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    z-index: 9998;
    background: rgba(255, 255, 255, 0.7);
    padding: 10px;
    border-radius: 8px;
    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(5px);
    border: 1px solid rgba(0, 0, 0, 0.1);
    max-height: 70vh;
    overflow: hidden;
    width: auto;
    transition: all 0.3s ease;
    gap: 5px;
}

#dev-tools button {
    padding: 8px 12px;
    background: rgba(244, 67, 54, 0.3);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 13px;
    transition: all 0.2s ease;
    min-width: 36px;
    text-align: center;
}

.dev-tools-buttons {
    display: flex;
    flex-direction: column;
    gap: 5px;
    overflow-y: auto;
    max-height: 60vh;
    transition: all 0.3s ease;
}

/* در حالت موبایل */
@media (max-width: 768px) {
    #dev-tools {
        left: 5px;
        padding: 8px;
        max-height: 60vh;
        backdrop-filter: none;
        background: rgba(255, 255, 255, 0.3);
    }
    
    #dev-tools button {
        padding: 6px 8px;
        font-size: 12px;
    }
    
    .dev-tools-header {
        font-size: 14px;
    }
    
    .toggle-visibility {
        font-size: 18px;
    }    
}

.dev-tools-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    color: #d32f2f;
    margin-bottom: 8px;
    padding: 5px;
    cursor: pointer;
    user-select: none;
}

.toggle-visibility {
    font-size: 20px;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

#dev-tools button:hover {
    background: rgba(244, 67, 54, 1);
    transform: translateX(5px);
}

#dev-tools button:active {
    transform: scale(0.95);
}

/* استایل مرحله فعلی */
#dev-tools button.current-step {
    background: rgba(183, 28, 28, 0.7);
    font-weight: bold;
    box-shadow: 0 0 0 2px rgba(255,255,255,0.5);
}

.checkbox-list-container {
    mask-image: linear-gradient(to bottom, 
        black 90%, 
        transparent 100%);
}

.scroll-indicator {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 40px;
    background: rgba(0, 133, 122, 0.2);
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 0.3s ease;
    opacity: 1;
    pointer-events: auto;
}

.scroll-indicator.hidden {
    opacity: 0;
    pointer-events: none;
    animation: none;
}

.scroll-indicator-arrow {
    width: 24px;
    height: 24px;
      background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 50" fill="none" stroke="%2300857a" stroke-width="15" stroke-linecap="square" stroke-linejoin="miter"><path d="M20 15 L50 35 L80 15"/></svg>');
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
}

@keyframes bounce {
    0%, 100% { transform: translate(-50%, 0); }
    50% { transform: translate(-50%, -5px); }
}

.scroll-indicator:not(.hidden) {
    animation: bounce 1.5s infinite;
}

.scroll-indicator:hover {
    background: rgba(0, 133, 122, 0.3);
    transform: translateX(-50%) scale(1.1);
}

/* در بخش تم تاریک (dark-mode) */
body.dark-mode .scroll-indicator {
    background: rgba(255, 255, 255, 0.2);
}

body.dark-mode .scroll-indicator-arrow {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 50" fill="none" stroke="%23ffffff" stroke-width="15" stroke-linecap="square" stroke-linejoin="miter"><path d="M20 15 L50 35 L80 15"/></svg>');
}

body.dark-mode .scroll-indicator:hover {
    background: rgba(255, 255, 255, 0.3);
}

.step-description {
    color: var(--light-text-color);
    text-align: center;
    margin-bottom: 25px;
    font-size: 14px;
}

.activity-option:hover,
.goal-option:hover,
.meal-option:hover{
    transform: translateY(-2px);
}

.activity-icon,
.goal-icon,
.meal-icon{
    width: 60px;
    height: 60px;
    margin-left: 15px;
    flex-shrink: 0;
}

.activity-icon img,
.goal-icon img,
.meal-icon img{
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.activity-details,
.goal-details,
.meal-details{
    flex: 1;
    text-align: right;
}

.activity-details h3,
.goal-details h3,
.meal-details h3{
    margin: 0 0 5px 0;
    color: #00857a;
    font-size: 16px;
}

.activity-details p,
.goal-details p,
.meal-details p{
    margin: 0;
    color: var(--light-text-color);
    font-size: 14px;
    font-weight: 500;
}

.activity-examples {
    display: block;
    margin-top: 5px;
    color: var(--light-text-color);
    font-size: 12px;
    font-style: italic;
}

/* تم تاریک */
body.dark-mode {
    --primary-color: #4db6ac;
    --secondary-color: #00897b;
    --background-color: #121212;
    --text-color: #e0e0e0; /* رنگ متن در حالت تاریک */
    --light-text-color: #a0a0a0; /* رنگ متن کم‌رنگ در حالت تاریک */
    --border-color: #333;
    --error-background: #1e3a5f;
    --error-border: #5e92f3;
    --valid-background: #1b3b1b;
    --valid-border: #4caf50;
    --valid-text: #81c784;
    --input-focus-bg: #333;
    --input-focus-border: #4db6ac;
    --option-bg: #1e1e1e;
    --option-selected-bg: #2d2d2d;
    --option-selected-border: #4db6ac;
    --button-bg: #00695c;
    --button-hover-bg: #004d40;
    --button-text: #fff;
    --progress-bar-bg: #333;
    --progress-bar-fill: #4db6ac;
    --orange-color: #ffb74d;
    --orange-shadow: rgba(255, 183, 77, 0.3);
    --orange-light-shadow: rgba(255, 183, 77, 0.15);
    --white-color: #121212;
    --shadow-color: rgba(0, 0, 0, 0.3);
    --light-shadow: rgba(0, 0, 0, 0.4);
    --pulse-glow: rgba(77, 182, 172, 0.4);
}

body.dark-mode .checkbox-label {
    background-color: #1e1e1e;
    border-color: #333;
}

body.dark-mode .info-box {
    background-color: #1e1e1e;
    border-color: #333;
}

body.dark-mode .summary-item {
    background-color: #1e1e1e;
}

body.dark-mode .water-cup {
    background-color: #1e3a5f;
    border-color: #5e92f3;
}

.theme-toggle:hover {
    transform: scale(1.1);
}

@media (max-width: 768px) {
    .theme-toggle {
        bottom: 60px;
        right: 15px;
        width: 35px;
        height: 35px;
    }
}


.theme-toggle {
    position: fixed;
    bottom: 60px;
    right: 20px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--primary-color);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
}


.theme-toggle svg {
    width: 24px;
    height: 24px;
    fill: #FFD700;
    transition: all 0.3s ease;
}

/* تم تاریک - آیکون خورشید زرد */
body.dark-mode .theme-toggle svg.sun-icon {
    display: block;
    fill: #FFD700; /* رنگ زرد برای خورشید در حالت تاریک */
}

body.dark-mode .theme-toggle svg.moon-icon {
    display: none;
}

/* تم روشن - آیکون ماه سفید */
body:not(.dark-mode) .theme-toggle svg.moon-icon {
    display: block;
    fill: #ffffff; /* رنگ سفید برای ماه در حالت روشن */
}

body:not(.dark-mode) .theme-toggle svg.sun-icon {
    display: none;
}


/* استایل پایه برای تمام کانتینرهای اسکرول */
#goal-selection,
#meal-selection,
#activity-selection {
    max-height: 55vh;
    min-height: 250px;
    overflow-y: auto;
    padding: 10px 5px;
    margin: 5px auto;
    scrollbar-width: thin;
    scrollbar-color: var(--primary-color) var(--background-color);
    mask-image: linear-gradient(to bottom, 
        black 90%, 
        transparent 100%);
    position: relative;
}

/* استایل اسکرولبار برای مرورگرهای وبکیت */
#goal-selection::-webkit-scrollbar,
#meal-selection::-webkit-scrollbar,
#activity-selection::-webkit-scrollbar {
    width: 6px;
}

#goal-selection::-webkit-scrollbar-track,
#meal-selection::-webkit-scrollbar-track,
#activity-selection::-webkit-scrollbar-track {
    background: var(--background-color);
    border-radius: 3px;
}

#goal-selection::-webkit-scrollbar-thumb,
#meal-selection::-webkit-scrollbar-thumb,
#activity-selection::-webkit-scrollbar-thumb {
    background-color: var(--primary-color);
    border-radius: 3px;
}

/* نشانگر اسکرول مشترک */
.scroll-indicator {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 40px;
    background: rgba(0, 133, 122, 0.2);
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 0.3s ease;
}

.scroll-indicator-arrow {
    width: 24px;
    height: 24px;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 50" fill="none" stroke="%2300857a" stroke-width="15" stroke-linecap="square" stroke-linejoin="miter"><path d="M20 15 L50 35 L80 15"/></svg>');
    background-repeat: no-repeat;
    background-position: center;
    background-size: contain;
}

/* استایل برای حالت تاریک */
body.dark-mode #goal-selection,
body.dark-mode #meal-selection,
body.dark-mode #activity-selection {
    scrollbar-color: #4db6ac #1e1e1e;
}

body.dark-mode #goal-selection::-webkit-scrollbar-track,
body.dark-mode #meal-selection::-webkit-scrollbar-track,
body.dark-mode #activity-selection::-webkit-scrollbar-track {
    background: #1e1e1e;
}

body.dark-mode #goal-selection::-webkit-scrollbar-thumb,
body.dark-mode #meal-selection::-webkit-scrollbar-thumb,
body.dark-mode #activity-selection::-webkit-scrollbar-thumb {
    background-color: #4db6ac;
}

body.dark-mode .scroll-indicator {
    background: rgba(77, 182, 172, 0.2);
}

body.dark-mode .scroll-indicator-arrow {
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 50" fill="none" stroke="%234db6ac" stroke-width="15" stroke-linecap="square" stroke-linejoin="miter"><path d="M20 15 L50 35 L80 15"/></svg>');
}

/* انیمیشن و hover */
.scroll-indicator:hover {
    background: rgba(0, 133, 122, 0.3);
}

body.dark-mode .scroll-indicator:hover {
    background: rgba(77, 182, 172, 0.3);
}

@keyframes bounce {
    0%, 100% { transform: translate(-50%, 0); }
    50% { transform: translate(-50%, -5px); }
}

.scroll-indicator:not(.hidden) {
    animation: bounce 1.5s infinite;
}
-----------------------------------------------------------------------------------------------------
<?php
/**
 * Functions for AI Assistant Theme
 */

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// 1. تنظیمات پایه قالب
function ai_assistant_setup() {
    load_theme_textdomain('ai-assistant', get_template_directory() . '/languages');
    
    add_theme_support('title-tag');
    add_theme_support('post-thumbnails');
    add_theme_support('woocommerce');
    add_theme_support('html5', ['search-form', 'comment-form', 'comment-list', 'gallery', 'caption']);
    
    // ثبت منوها
    register_nav_menus([
        'primary' => __('منوی اصلی', 'ai-assistant'),
        'footer' => __('منوی فوتر', 'ai-assistant')
    ]);
}
add_action('after_setup_theme', 'ai_assistant_setup');

// 2. بارگذاری فایل‌های جانبی
require_once get_template_directory() . '/inc/class-service-manager.php';
require_once get_template_directory() . '/inc/class-payment-handler.php';


function ai_assistant_load_css() {
    
    // بارگذاری main.css
    wp_enqueue_style(
        'ai-main',
        get_template_directory_uri() . '/assets/css/main.css',
        array(),
        filemtime(get_template_directory() . '/assets/css/main.css')
    );
    
  // بارگذاری dashicons از پوشه core وردپرس
    wp_enqueue_style('dashicons'); // این خط به صورت پیش‌فرض dashicons را از هسته بارگذاری می‌کند
    
    
    // بارگذاری chat.css فقط در صفحه چت
    if (is_page('service')) {
        $service_id = get_query_var('service');
        if ($service_id) {
            $css_path = '/assets/css/services/' . $service_id . '.css';
            if (file_exists(get_template_directory() . $css_path)) {
                wp_enqueue_style(
                    'ai-assistant-' . $service_id . '-css',
                    get_template_directory_uri() . $css_path,
                    array(),
                    wp_get_theme()->get('Version')
                );
            }
        }
    }
}
add_action('wp_enqueue_scripts', 'ai_assistant_load_css');

// 3. بارگذاری سرویس‌ها
foreach (glob(get_template_directory() . '/services/*/functions.php') as $service_file) {
    require_once $service_file;
}

// 4. ایجاد صفحات ضروری
function ai_assistant_create_pages() {
    $pages = [
        'ai-services' => [
            'title' => __('سرویس‌های هوش مصنوعی', 'ai-assistant'),
            'template' => 'templates/services-page.php'
        ],
        'service' => [
            'title' => __('سرویس', 'ai-assistant'),
            'template' => 'templates/single-service.php'
        ]
    ];
    
    foreach ($pages as $slug => $page) {
        if (!get_page_by_path($slug)) {
            wp_insert_post([
                'post_title' => $page['title'],
                'post_name' => $slug,
                'post_status' => 'publish',
                'post_type' => 'page',
                'page_template' => $page['template']
            ]);
        }
    }
    flush_rewrite_rules();
}
add_action('after_switch_theme', 'ai_assistant_create_pages');

// 5. تنظیمات rewrite برای URL سرویس‌ها
function ai_assistant_add_rewrite_rules() {
    add_rewrite_rule('^service/([^/]+)/?', 'index.php?pagename=service&service=$matches[1]', 'top');
}
add_action('init', 'ai_assistant_add_rewrite_rules');

function ai_assistant_add_query_vars($vars) {
    $vars[] = 'service';
    return $vars;
}
add_filter('query_vars', 'ai_assistant_add_query_vars');

// 6. بارگذاری اسکریپت‌ها و استایل‌ها
function ai_assistant_scripts() {
    // استایل اصلی
    wp_enqueue_style('ai-assistant-style', get_stylesheet_uri(), [], wp_get_theme()->get('Version'));
    
    // اسکریپت اصلی
    wp_enqueue_script(
        'ai-assistant-main', 
        get_template_directory_uri() . '/assets/js/main.js', 
        ['jquery'], 
        wp_get_theme()->get('Version'), 
        true
    );
    
    // داده‌های محلی شده
    wp_localize_script('ai-assistant-main', 'aiAssistantVars', [
        'ajaxurl' => admin_url('admin-ajax.php'),
        'themeUrl' => get_template_directory_uri(),
        'nonce' => wp_create_nonce('ai_assistant_nonce'),
        'i18n' => [
            'error' => __('خطا', 'ai-assistant'),
            'loading' => __('در حال پردازش...', 'ai-assistant')
        ]
    ]);
    
}
add_action('wp_enqueue_scripts', 'ai_assistant_scripts');

// 7. اضافه کردن تب به حساب کاربری ووکامرس
function ai_assistant_add_woocommerce_tab($items) {
    $items['ai-assistant'] = __('دستیار هوش مصنوعی', 'ai-assistant');
    return $items;
}
add_filter('woocommerce_account_menu_items', 'ai_assistant_add_woocommerce_tab');

function ai_assistant_add_endpoint() {
    add_rewrite_endpoint('ai-assistant', EP_ROOT | EP_PAGES);
}
add_action('init', 'ai_assistant_add_endpoint');

function ai_assistant_tab_content() {
    include get_template_directory() . '/templates/dashboard.php';
}
add_action('woocommerce_account_ai-assistant_endpoint', 'ai_assistant_tab_content');

//----------کیف پول
add_action('woocommerce_thankyou', 'ai_wallet_payment_complete');

function ai_wallet_payment_complete($order_id) {
    if (!$order_id) return;

    $order = wc_get_order($order_id);
    if (!$order) return;

    $user_id = $order->get_user_id();
    if (!$user_id) return;

    $pending_data = get_user_meta($user_id, 'wallet_charge_pending', true);

    if (!$pending_data || $pending_data['status'] !== 'pending') return;

    foreach ($order->get_items() as $item) {
        $product_name = $item->get_name();
        if (strpos($product_name, $pending_data['id']) !== false) {
            // تأیید موفقیت‌آمیز و افزودن اعتبار
            $amount = (float) $pending_data['amount'];
            AI_Assistant_Payment_Handler::get_instance()->add_credit($user_id, $amount);

            // پاک‌سازی متا
            delete_user_meta($user_id, 'wallet_charge_pending');

            // ثبت پیام موفقیت
            wc_add_notice('شارژ کیف پول با موفقیت انجام شد.', 'success');
            break;
        }
    }
}

//------------------------------------

add_action('wp_ajax_get_user_wallet_credit', 'get_user_wallet_credit_callback');
add_action('wp_ajax_nopriv_get_user_wallet_credit', 'get_user_wallet_credit_callback');

function get_user_wallet_credit_callback() {
    if (!is_user_logged_in()) {
        wp_send_json_error(['message' => 'کاربر وارد نشده است.']);
    }

    $user_id = get_current_user_id();
    if (!class_exists('AI_Assistant_Payment_Handler')) {
        wp_send_json_error(['message' => 'کلاس کیف پول موجود نیست.']);
    }

    $credit = AI_Assistant_Payment_Handler::get_instance()->get_user_credit($user_id);
    wp_send_json_success(['credit' => $credit]);
}

require_once __DIR__ . '/inc/admin/services-admin.php';

//--------------------------------------------------------------


require_once get_template_directory() . '/inc/class-history-manager.php';

add_action('init', function() {
    add_rewrite_rule(
        '^service-output/([0-9]+)/?$',
        'index.php?post_type=ai_service_history&p=$matches[1]',
        'top'
    );
    
    add_rewrite_rule(
        '^service-output/([0-9]+)/?$',
        'index.php?post_type=ai_wallet_history&p=$matches[1]',
        'top'
    );
    
});

add_action('pre_get_posts', function($query) {
    if (!is_admin() && $query->is_main_query() && isset($query->query['post_type']) && $query->query['post_type'] === 'ai_service_history') {
        $query->set('post_type', 'ai_service_history');
        $query->set('post_status', 'publish');
    }
});

add_action('pre_get_posts', function($query) {
    if (!is_admin() && $query->is_main_query() && isset($query->query['service-output'])) {
        $query->set('post_type', 'ai_service_history');
    }
});

// بعد از اضافه کردن این کدها، به تنظیمات > پیوندهای یکتا رفته و ذخیره کنید
//---------------------------------------------------------
// حذف آیتم تاریخچه با AJAX
add_action('wp_ajax_delete_history_item', function() {
    check_ajax_referer('history_ajax_nonce', '_wpnonce');

    $post_id = absint($_POST['post_id']);
    $user_id = get_current_user_id();
    $history_manager = AI_Assistant_History_Manager::get_instance();

    if ($history_manager->delete_history_item($post_id, $user_id)) {
        wp_send_json_success('آیتم با موفقیت حذف شد.');
    } else {
        wp_send_json_error('خطا در حذف آیتم.');
    }
});

//---------------------------------------------------------

require_once get_template_directory() . '/inc/class-wallet-history-manager.php';



add_action('pre_get_posts', function($query) {
    if (!is_admin() && $query->is_main_query() && isset($query->query['post_type']) && $query->query['post_type'] === 'ai_wallet_history') {
        $query->set('post_type', 'ai_wallet_history');
        $query->set('post_status', 'publish');
    }
});

add_action('init', function() {
    add_rewrite_endpoint('service-output', EP_PERMALINK);
});
-----------------------------------------------------------------------------------------------------
این کد رو ببین. 
چیزهایی که تو نوشته پایین ازت میخوام رو تو قالب تیکه های کد که امکان کپی و دانلود داره برام بفرست که راحت بتونم کپی کنم
-----------------------------------------------------------------------------------------------------